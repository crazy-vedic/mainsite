{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Tokenizer = exports.TokenizerMode = void 0;\nconst preprocessor_js_1 = require(\"./preprocessor.js\");\nconst unicode_js_1 = require(\"../common/unicode.js\");\nconst token_js_1 = require(\"../common/token.js\");\nconst decode_js_1 = require(\"entities/lib/decode.js\");\nconst error_codes_js_1 = require(\"../common/error-codes.js\");\nconst html_js_1 = require(\"../common/html.js\");\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([[0x80, 8364], [0x82, 8218], [0x83, 402], [0x84, 8222], [0x85, 8230], [0x86, 8224], [0x87, 8225], [0x88, 710], [0x89, 8240], [0x8a, 352], [0x8b, 8249], [0x8c, 338], [0x8e, 381], [0x91, 8216], [0x92, 8217], [0x93, 8220], [0x94, 8221], [0x95, 8226], [0x96, 8211], [0x97, 8212], [0x98, 732], [0x99, 8482], [0x9a, 353], [0x9b, 8250], [0x9c, 339], [0x9e, 382], [0x9f, 376]]);\n//States\nvar State;\n(function (State) {\n  State[State[\"DATA\"] = 0] = \"DATA\";\n  State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n  State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n  State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n  State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n  State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n  State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n  State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n  State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n  State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n  State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n  State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n  State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n  State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n  State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n  State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n  State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n  State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n  State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n  State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n  State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n  State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n  State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n  State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n  State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n  State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n  State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n  State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n  State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n  State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n  State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n  State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n  State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n  State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n  State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n  State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n  State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n  State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n  State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n  State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n  State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n  State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n  State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n  State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n  State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n  State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n  State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n  State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n  State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n  State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n  State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n  State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n  State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexports.TokenizerMode = {\n  DATA: State.DATA,\n  RCDATA: State.RCDATA,\n  RAWTEXT: State.RAWTEXT,\n  SCRIPT_DATA: State.SCRIPT_DATA,\n  PLAINTEXT: State.PLAINTEXT,\n  CDATA_SECTION: State.CDATA_SECTION\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.DIGIT_0 && cp <= unicode_js_1.CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n  return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n  return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n  return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n  return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n  return cp + 32;\n}\nfunction isWhitespace(cp) {\n  return cp === unicode_js_1.CODE_POINTS.SPACE || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.TABULATION || cp === unicode_js_1.CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n  return nextCp === unicode_js_1.CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n  return isWhitespace(cp) || cp === unicode_js_1.CODE_POINTS.SOLIDUS || cp === unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n  constructor(options, handler) {\n    this.options = options;\n    this.handler = handler;\n    this.paused = false;\n    /** Ensures that the parsing loop isn't run multiple times at once. */\n    this.inLoop = false;\n    /**\n     * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n     * and that it is not an integration point for either MathML or HTML.\n     *\n     * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n     */\n    this.inForeignNode = false;\n    this.lastStartTagName = '';\n    this.active = false;\n    this.state = State.DATA;\n    this.returnState = State.DATA;\n    this.charRefCode = -1;\n    this.consumedAfterSnapshot = -1;\n    this.currentCharacterToken = null;\n    this.currentToken = null;\n    this.currentAttr = {\n      name: '',\n      value: ''\n    };\n    this.preprocessor = new preprocessor_js_1.Preprocessor(handler);\n    this.currentLocation = this.getCurrentLocation(-1);\n  }\n  //Errors\n  _err(code) {\n    var _a, _b;\n    (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n  }\n  // NOTE: `offset` may never run across line boundaries.\n  getCurrentLocation(offset) {\n    if (!this.options.sourceCodeLocationInfo) {\n      return null;\n    }\n    return {\n      startLine: this.preprocessor.line,\n      startCol: this.preprocessor.col - offset,\n      startOffset: this.preprocessor.offset - offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    };\n  }\n  _runParsingLoop() {\n    if (this.inLoop) return;\n    this.inLoop = true;\n    while (this.active && !this.paused) {\n      this.consumedAfterSnapshot = 0;\n      const cp = this._consume();\n      if (!this._ensureHibernation()) {\n        this._callState(cp);\n      }\n    }\n    this.inLoop = false;\n  }\n  //API\n  pause() {\n    this.paused = true;\n  }\n  resume(writeCallback) {\n    if (!this.paused) {\n      throw new Error('Parser was already resumed');\n    }\n    this.paused = false;\n    // Necessary for synchronous resume.\n    if (this.inLoop) return;\n    this._runParsingLoop();\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n  write(chunk, isLastChunk, writeCallback) {\n    this.active = true;\n    this.preprocessor.write(chunk, isLastChunk);\n    this._runParsingLoop();\n    if (!this.paused) {\n      writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n    }\n  }\n  insertHtmlAtCurrentPos(chunk) {\n    this.active = true;\n    this.preprocessor.insertHtmlAtCurrentPos(chunk);\n    this._runParsingLoop();\n  }\n  //Hibernation\n  _ensureHibernation() {\n    if (this.preprocessor.endOfChunkHit) {\n      this._unconsume(this.consumedAfterSnapshot);\n      this.active = false;\n      return true;\n    }\n    return false;\n  }\n  //Consumption\n  _consume() {\n    this.consumedAfterSnapshot++;\n    return this.preprocessor.advance();\n  }\n  _unconsume(count) {\n    this.consumedAfterSnapshot -= count;\n    this.preprocessor.retreat(count);\n  }\n  _reconsumeInState(state, cp) {\n    this.state = state;\n    this._callState(cp);\n  }\n  _advanceBy(count) {\n    this.consumedAfterSnapshot += count;\n    for (let i = 0; i < count; i++) {\n      this.preprocessor.advance();\n    }\n  }\n  _consumeSequenceIfMatch(pattern, caseSensitive) {\n    if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n      // We will already have consumed one character before calling this method.\n      this._advanceBy(pattern.length - 1);\n      return true;\n    }\n    return false;\n  }\n  //Token creation\n  _createStartTagToken() {\n    this.currentToken = {\n      type: token_js_1.TokenType.START_TAG,\n      tagName: '',\n      tagID: html_js_1.TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(1)\n    };\n  }\n  _createEndTagToken() {\n    this.currentToken = {\n      type: token_js_1.TokenType.END_TAG,\n      tagName: '',\n      tagID: html_js_1.TAG_ID.UNKNOWN,\n      selfClosing: false,\n      ackSelfClosing: false,\n      attrs: [],\n      location: this.getCurrentLocation(2)\n    };\n  }\n  _createCommentToken(offset) {\n    this.currentToken = {\n      type: token_js_1.TokenType.COMMENT,\n      data: '',\n      location: this.getCurrentLocation(offset)\n    };\n  }\n  _createDoctypeToken(initialName) {\n    this.currentToken = {\n      type: token_js_1.TokenType.DOCTYPE,\n      name: initialName,\n      forceQuirks: false,\n      publicId: null,\n      systemId: null,\n      location: this.currentLocation\n    };\n  }\n  _createCharacterToken(type, chars) {\n    this.currentCharacterToken = {\n      type,\n      chars,\n      location: this.currentLocation\n    };\n  }\n  //Tag attributes\n  _createAttr(attrNameFirstCh) {\n    this.currentAttr = {\n      name: attrNameFirstCh,\n      value: ''\n    };\n    this.currentLocation = this.getCurrentLocation(0);\n  }\n  _leaveAttrName() {\n    var _a;\n    var _b;\n    const token = this.currentToken;\n    if ((0, token_js_1.getTokenAttr)(token, this.currentAttr.name) === null) {\n      token.attrs.push(this.currentAttr);\n      if (token.location && this.currentLocation) {\n        const attrLocations = (_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : _b.attrs = Object.create(null);\n        attrLocations[this.currentAttr.name] = this.currentLocation;\n        // Set end location\n        this._leaveAttrValue();\n      }\n    } else {\n      this._err(error_codes_js_1.ERR.duplicateAttribute);\n    }\n  }\n  _leaveAttrValue() {\n    if (this.currentLocation) {\n      this.currentLocation.endLine = this.preprocessor.line;\n      this.currentLocation.endCol = this.preprocessor.col;\n      this.currentLocation.endOffset = this.preprocessor.offset;\n    }\n  }\n  //Token emission\n  prepareToken(ct) {\n    this._emitCurrentCharacterToken(ct.location);\n    this.currentToken = null;\n    if (ct.location) {\n      ct.location.endLine = this.preprocessor.line;\n      ct.location.endCol = this.preprocessor.col + 1;\n      ct.location.endOffset = this.preprocessor.offset + 1;\n    }\n    this.currentLocation = this.getCurrentLocation(-1);\n  }\n  emitCurrentTagToken() {\n    const ct = this.currentToken;\n    this.prepareToken(ct);\n    ct.tagID = (0, html_js_1.getTagID)(ct.tagName);\n    if (ct.type === token_js_1.TokenType.START_TAG) {\n      this.lastStartTagName = ct.tagName;\n      this.handler.onStartTag(ct);\n    } else {\n      if (ct.attrs.length > 0) {\n        this._err(error_codes_js_1.ERR.endTagWithAttributes);\n      }\n      if (ct.selfClosing) {\n        this._err(error_codes_js_1.ERR.endTagWithTrailingSolidus);\n      }\n      this.handler.onEndTag(ct);\n    }\n    this.preprocessor.dropParsedChunk();\n  }\n  emitCurrentComment(ct) {\n    this.prepareToken(ct);\n    this.handler.onComment(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n  emitCurrentDoctype(ct) {\n    this.prepareToken(ct);\n    this.handler.onDoctype(ct);\n    this.preprocessor.dropParsedChunk();\n  }\n  _emitCurrentCharacterToken(nextLocation) {\n    if (this.currentCharacterToken) {\n      //NOTE: if we have a pending character token, make it's end location equal to the\n      //current token's start location.\n      if (nextLocation && this.currentCharacterToken.location) {\n        this.currentCharacterToken.location.endLine = nextLocation.startLine;\n        this.currentCharacterToken.location.endCol = nextLocation.startCol;\n        this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n      }\n      switch (this.currentCharacterToken.type) {\n        case token_js_1.TokenType.CHARACTER:\n          {\n            this.handler.onCharacter(this.currentCharacterToken);\n            break;\n          }\n        case token_js_1.TokenType.NULL_CHARACTER:\n          {\n            this.handler.onNullCharacter(this.currentCharacterToken);\n            break;\n          }\n        case token_js_1.TokenType.WHITESPACE_CHARACTER:\n          {\n            this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n            break;\n          }\n      }\n      this.currentCharacterToken = null;\n    }\n  }\n  _emitEOFToken() {\n    const location = this.getCurrentLocation(0);\n    if (location) {\n      location.endLine = location.startLine;\n      location.endCol = location.startCol;\n      location.endOffset = location.startOffset;\n    }\n    this._emitCurrentCharacterToken(location);\n    this.handler.onEof({\n      type: token_js_1.TokenType.EOF,\n      location\n    });\n    this.active = false;\n  }\n  //Characters emission\n  //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n  //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n  //If we have a sequence of characters that belong to the same group, the parser can process it\n  //as a single solid character token.\n  //So, there are 3 types of character tokens in parse5:\n  //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n  //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n  //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n  _appendCharToCurrentCharacterToken(type, ch) {\n    if (this.currentCharacterToken) {\n      if (this.currentCharacterToken.type !== type) {\n        this.currentLocation = this.getCurrentLocation(0);\n        this._emitCurrentCharacterToken(this.currentLocation);\n        this.preprocessor.dropParsedChunk();\n      } else {\n        this.currentCharacterToken.chars += ch;\n        return;\n      }\n    }\n    this._createCharacterToken(type, ch);\n  }\n  _emitCodePoint(cp) {\n    const type = isWhitespace(cp) ? token_js_1.TokenType.WHITESPACE_CHARACTER : cp === unicode_js_1.CODE_POINTS.NULL ? token_js_1.TokenType.NULL_CHARACTER : token_js_1.TokenType.CHARACTER;\n    this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n  }\n  //NOTE: used when we emit characters explicitly.\n  //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n  _emitChars(ch) {\n    this._appendCharToCurrentCharacterToken(token_js_1.TokenType.CHARACTER, ch);\n  }\n  // Character reference helpers\n  _matchNamedCharacterReference(cp) {\n    let result = null;\n    let excess = 0;\n    let withoutSemicolon = false;\n    for (let i = 0, current = decode_js_1.htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n      i = (0, decode_js_1.determineBranch)(decode_js_1.htmlDecodeTree, current, i + 1, cp);\n      if (i < 0) break;\n      excess += 1;\n      current = decode_js_1.htmlDecodeTree[i];\n      const masked = current & decode_js_1.BinTrieFlags.VALUE_LENGTH;\n      // If the branch is a value, store it and continue\n      if (masked) {\n        // The mask is the number of bytes of the value, including the current byte.\n        const valueLength = (masked >> 14) - 1;\n        // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n        // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n        if (cp !== unicode_js_1.CODE_POINTS.SEMICOLON && this._isCharacterReferenceInAttribute() && isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n          //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n          //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n          result = [unicode_js_1.CODE_POINTS.AMPERSAND];\n          // Skip over the value.\n          i += valueLength;\n        } else {\n          // If this is a surrogate pair, consume the next two bytes.\n          result = valueLength === 0 ? [decode_js_1.htmlDecodeTree[i] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH] : valueLength === 1 ? [decode_js_1.htmlDecodeTree[++i]] : [decode_js_1.htmlDecodeTree[++i], decode_js_1.htmlDecodeTree[++i]];\n          excess = 0;\n          withoutSemicolon = cp !== unicode_js_1.CODE_POINTS.SEMICOLON;\n        }\n        if (valueLength === 0) {\n          // If the value is zero-length, we're done.\n          this._consume();\n          break;\n        }\n      }\n    }\n    this._unconsume(excess);\n    if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n      this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n    }\n    // We want to emit the error above on the code point after the entity.\n    // We always consume one code point too many in the loop, and we wait to\n    // unconsume it until after the error is emitted.\n    this._unconsume(1);\n    return result;\n  }\n  _isCharacterReferenceInAttribute() {\n    return this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED || this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED;\n  }\n  _flushCodePointConsumedAsCharacterReference(cp) {\n    if (this._isCharacterReferenceInAttribute()) {\n      this.currentAttr.value += String.fromCodePoint(cp);\n    } else {\n      this._emitCodePoint(cp);\n    }\n  }\n  // Calling states this way turns out to be much faster than any other approach.\n  _callState(cp) {\n    switch (this.state) {\n      case State.DATA:\n        {\n          this._stateData(cp);\n          break;\n        }\n      case State.RCDATA:\n        {\n          this._stateRcdata(cp);\n          break;\n        }\n      case State.RAWTEXT:\n        {\n          this._stateRawtext(cp);\n          break;\n        }\n      case State.SCRIPT_DATA:\n        {\n          this._stateScriptData(cp);\n          break;\n        }\n      case State.PLAINTEXT:\n        {\n          this._statePlaintext(cp);\n          break;\n        }\n      case State.TAG_OPEN:\n        {\n          this._stateTagOpen(cp);\n          break;\n        }\n      case State.END_TAG_OPEN:\n        {\n          this._stateEndTagOpen(cp);\n          break;\n        }\n      case State.TAG_NAME:\n        {\n          this._stateTagName(cp);\n          break;\n        }\n      case State.RCDATA_LESS_THAN_SIGN:\n        {\n          this._stateRcdataLessThanSign(cp);\n          break;\n        }\n      case State.RCDATA_END_TAG_OPEN:\n        {\n          this._stateRcdataEndTagOpen(cp);\n          break;\n        }\n      case State.RCDATA_END_TAG_NAME:\n        {\n          this._stateRcdataEndTagName(cp);\n          break;\n        }\n      case State.RAWTEXT_LESS_THAN_SIGN:\n        {\n          this._stateRawtextLessThanSign(cp);\n          break;\n        }\n      case State.RAWTEXT_END_TAG_OPEN:\n        {\n          this._stateRawtextEndTagOpen(cp);\n          break;\n        }\n      case State.RAWTEXT_END_TAG_NAME:\n        {\n          this._stateRawtextEndTagName(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataLessThanSign(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_END_TAG_OPEN:\n        {\n          this._stateScriptDataEndTagOpen(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_END_TAG_NAME:\n        {\n          this._stateScriptDataEndTagName(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPE_START:\n        {\n          this._stateScriptDataEscapeStart(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPE_START_DASH:\n        {\n          this._stateScriptDataEscapeStartDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED:\n        {\n          this._stateScriptDataEscaped(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_DASH:\n        {\n          this._stateScriptDataEscapedDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataEscapedDashDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataEscapedLessThanSign(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN:\n        {\n          this._stateScriptDataEscapedEndTagOpen(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME:\n        {\n          this._stateScriptDataEscapedEndTagName(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_START:\n        {\n          this._stateScriptDataDoubleEscapeStart(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED:\n        {\n          this._stateScriptDataDoubleEscaped(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH:\n        {\n          this._stateScriptDataDoubleEscapedDashDash(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN:\n        {\n          this._stateScriptDataDoubleEscapedLessThanSign(cp);\n          break;\n        }\n      case State.SCRIPT_DATA_DOUBLE_ESCAPE_END:\n        {\n          this._stateScriptDataDoubleEscapeEnd(cp);\n          break;\n        }\n      case State.BEFORE_ATTRIBUTE_NAME:\n        {\n          this._stateBeforeAttributeName(cp);\n          break;\n        }\n      case State.ATTRIBUTE_NAME:\n        {\n          this._stateAttributeName(cp);\n          break;\n        }\n      case State.AFTER_ATTRIBUTE_NAME:\n        {\n          this._stateAfterAttributeName(cp);\n          break;\n        }\n      case State.BEFORE_ATTRIBUTE_VALUE:\n        {\n          this._stateBeforeAttributeValue(cp);\n          break;\n        }\n      case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED:\n        {\n          this._stateAttributeValueDoubleQuoted(cp);\n          break;\n        }\n      case State.ATTRIBUTE_VALUE_SINGLE_QUOTED:\n        {\n          this._stateAttributeValueSingleQuoted(cp);\n          break;\n        }\n      case State.ATTRIBUTE_VALUE_UNQUOTED:\n        {\n          this._stateAttributeValueUnquoted(cp);\n          break;\n        }\n      case State.AFTER_ATTRIBUTE_VALUE_QUOTED:\n        {\n          this._stateAfterAttributeValueQuoted(cp);\n          break;\n        }\n      case State.SELF_CLOSING_START_TAG:\n        {\n          this._stateSelfClosingStartTag(cp);\n          break;\n        }\n      case State.BOGUS_COMMENT:\n        {\n          this._stateBogusComment(cp);\n          break;\n        }\n      case State.MARKUP_DECLARATION_OPEN:\n        {\n          this._stateMarkupDeclarationOpen(cp);\n          break;\n        }\n      case State.COMMENT_START:\n        {\n          this._stateCommentStart(cp);\n          break;\n        }\n      case State.COMMENT_START_DASH:\n        {\n          this._stateCommentStartDash(cp);\n          break;\n        }\n      case State.COMMENT:\n        {\n          this._stateComment(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN:\n        {\n          this._stateCommentLessThanSign(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN_BANG:\n        {\n          this._stateCommentLessThanSignBang(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH:\n        {\n          this._stateCommentLessThanSignBangDash(cp);\n          break;\n        }\n      case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH:\n        {\n          this._stateCommentLessThanSignBangDashDash(cp);\n          break;\n        }\n      case State.COMMENT_END_DASH:\n        {\n          this._stateCommentEndDash(cp);\n          break;\n        }\n      case State.COMMENT_END:\n        {\n          this._stateCommentEnd(cp);\n          break;\n        }\n      case State.COMMENT_END_BANG:\n        {\n          this._stateCommentEndBang(cp);\n          break;\n        }\n      case State.DOCTYPE:\n        {\n          this._stateDoctype(cp);\n          break;\n        }\n      case State.BEFORE_DOCTYPE_NAME:\n        {\n          this._stateBeforeDoctypeName(cp);\n          break;\n        }\n      case State.DOCTYPE_NAME:\n        {\n          this._stateDoctypeName(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_NAME:\n        {\n          this._stateAfterDoctypeName(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_PUBLIC_KEYWORD:\n        {\n          this._stateAfterDoctypePublicKeyword(cp);\n          break;\n        }\n      case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateBeforeDoctypePublicIdentifier(cp);\n          break;\n        }\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n          break;\n        }\n      case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypePublicIdentifierSingleQuoted(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER:\n        {\n          this._stateAfterDoctypePublicIdentifier(cp);\n          break;\n        }\n      case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS:\n        {\n          this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_SYSTEM_KEYWORD:\n        {\n          this._stateAfterDoctypeSystemKeyword(cp);\n          break;\n        }\n      case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateBeforeDoctypeSystemIdentifier(cp);\n          break;\n        }\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n          break;\n        }\n      case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED:\n        {\n          this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n          break;\n        }\n      case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER:\n        {\n          this._stateAfterDoctypeSystemIdentifier(cp);\n          break;\n        }\n      case State.BOGUS_DOCTYPE:\n        {\n          this._stateBogusDoctype(cp);\n          break;\n        }\n      case State.CDATA_SECTION:\n        {\n          this._stateCdataSection(cp);\n          break;\n        }\n      case State.CDATA_SECTION_BRACKET:\n        {\n          this._stateCdataSectionBracket(cp);\n          break;\n        }\n      case State.CDATA_SECTION_END:\n        {\n          this._stateCdataSectionEnd(cp);\n          break;\n        }\n      case State.CHARACTER_REFERENCE:\n        {\n          this._stateCharacterReference(cp);\n          break;\n        }\n      case State.NAMED_CHARACTER_REFERENCE:\n        {\n          this._stateNamedCharacterReference(cp);\n          break;\n        }\n      case State.AMBIGUOUS_AMPERSAND:\n        {\n          this._stateAmbiguousAmpersand(cp);\n          break;\n        }\n      case State.NUMERIC_CHARACTER_REFERENCE:\n        {\n          this._stateNumericCharacterReference(cp);\n          break;\n        }\n      case State.HEXADEMICAL_CHARACTER_REFERENCE_START:\n        {\n          this._stateHexademicalCharacterReferenceStart(cp);\n          break;\n        }\n      case State.HEXADEMICAL_CHARACTER_REFERENCE:\n        {\n          this._stateHexademicalCharacterReference(cp);\n          break;\n        }\n      case State.DECIMAL_CHARACTER_REFERENCE:\n        {\n          this._stateDecimalCharacterReference(cp);\n          break;\n        }\n      case State.NUMERIC_CHARACTER_REFERENCE_END:\n        {\n          this._stateNumericCharacterReferenceEnd(cp);\n          break;\n        }\n      default:\n        {\n          throw new Error('Unknown state');\n        }\n    }\n  }\n  // State machine\n  // Data state\n  //------------------------------------------------------------------\n  _stateData(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.TAG_OPEN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.DATA;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitCodePoint(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  //  RCDATA state\n  //------------------------------------------------------------------\n  _stateRcdata(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.RCDATA;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.RCDATA_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // RAWTEXT state\n  //------------------------------------------------------------------\n  _stateRawtext(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.RAWTEXT_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data state\n  //------------------------------------------------------------------\n  _stateScriptData(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // PLAINTEXT state\n  //------------------------------------------------------------------\n  _statePlaintext(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Tag open state\n  //------------------------------------------------------------------\n  _stateTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createStartTagToken();\n      this.state = State.TAG_NAME;\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          this.state = State.MARKUP_DECLARATION_OPEN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.END_TAG_OPEN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUESTION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedQuestionMarkInsteadOfTagName);\n          this._createCommentToken(1);\n          this.state = State.BOGUS_COMMENT;\n          this._stateBogusComment(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofBeforeTagName);\n          this._emitChars('<');\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n          this._emitChars('<');\n          this.state = State.DATA;\n          this._stateData(cp);\n        }\n    }\n  }\n  // End tag open state\n  //------------------------------------------------------------------\n  _stateEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this._createEndTagToken();\n      this.state = State.TAG_NAME;\n      this._stateTagName(cp);\n    } else switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingEndTagName);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofBeforeTagName);\n          this._emitChars('</');\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n          this._createCommentToken(2);\n          this.state = State.BOGUS_COMMENT;\n          this._stateBogusComment(cp);\n        }\n    }\n  }\n  // Tag name state\n  //------------------------------------------------------------------\n  _stateTagName(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.tagName += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  }\n  // RCDATA less-than sign state\n  //------------------------------------------------------------------\n  _stateRcdataLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.RCDATA_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n      this.state = State.RCDATA;\n      this._stateRcdata(cp);\n    }\n  }\n  // RCDATA end tag open state\n  //------------------------------------------------------------------\n  _stateRcdataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RCDATA_END_TAG_NAME;\n      this._stateRcdataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.RCDATA;\n      this._stateRcdata(cp);\n    }\n  }\n  handleSpecialEndTag(_cp) {\n    if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n      return !this._ensureHibernation();\n    }\n    this._createEndTagToken();\n    const token = this.currentToken;\n    token.tagName = this.lastStartTagName;\n    const cp = this.preprocessor.peek(this.lastStartTagName.length);\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          return false;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n          this.state = State.SELF_CLOSING_START_TAG;\n          return false;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._advanceBy(this.lastStartTagName.length);\n          this.emitCurrentTagToken();\n          this.state = State.DATA;\n          return false;\n        }\n      default:\n        {\n          return !this._ensureHibernation();\n        }\n    }\n  }\n  // RCDATA end tag name state\n  //------------------------------------------------------------------\n  _stateRcdataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.RCDATA;\n      this._stateRcdata(cp);\n    }\n  }\n  // RAWTEXT less-than sign state\n  //------------------------------------------------------------------\n  _stateRawtextLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.RAWTEXT_END_TAG_OPEN;\n    } else {\n      this._emitChars('<');\n      this.state = State.RAWTEXT;\n      this._stateRawtext(cp);\n    }\n  }\n  // RAWTEXT end tag open state\n  //------------------------------------------------------------------\n  _stateRawtextEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.RAWTEXT_END_TAG_NAME;\n      this._stateRawtextEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.RAWTEXT;\n      this._stateRawtext(cp);\n    }\n  }\n  // RAWTEXT end tag name state\n  //------------------------------------------------------------------\n  _stateRawtextEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.RAWTEXT;\n      this._stateRawtext(cp);\n    }\n  }\n  // Script data less-than sign state\n  //------------------------------------------------------------------\n  _stateScriptDataLessThanSign(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPE_START;\n          this._emitChars('<!');\n          break;\n        }\n      default:\n        {\n          this._emitChars('<');\n          this.state = State.SCRIPT_DATA;\n          this._stateScriptData(cp);\n        }\n    }\n  }\n  // Script data end tag open state\n  //------------------------------------------------------------------\n  _stateScriptDataEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_END_TAG_NAME;\n      this._stateScriptDataEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data end tag name state\n  //------------------------------------------------------------------\n  _stateScriptDataEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data escape start state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapeStart(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data escape start dash state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapeStartDash(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n      this._emitChars('-');\n    } else {\n      this.state = State.SCRIPT_DATA;\n      this._stateScriptData(cp);\n    }\n  }\n  // Script data escaped state\n  //------------------------------------------------------------------\n  _stateScriptDataEscaped(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data escaped dash state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data escaped dash dash state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedDashDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n          this._emitChars('>');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data escaped less-than sign state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n    } else if (isAsciiLetter(cp)) {\n      this._emitChars('<');\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n      this._stateScriptDataDoubleEscapeStart(cp);\n    } else {\n      this._emitChars('<');\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data escaped end tag open state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedEndTagOpen(cp) {\n    if (isAsciiLetter(cp)) {\n      this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n      this._stateScriptDataEscapedEndTagName(cp);\n    } else {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data escaped end tag name state\n  //------------------------------------------------------------------\n  _stateScriptDataEscapedEndTagName(cp) {\n    if (this.handleSpecialEndTag(cp)) {\n      this._emitChars('</');\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data double escape start state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapeStart(cp) {\n    if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n      for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_ESCAPED;\n      this._stateScriptDataEscaped(cp);\n    }\n  }\n  // Script data double escaped state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscaped(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n          this._emitChars('<');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data double escaped dash state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapedDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n          this._emitChars('<');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data double escaped dash dash state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapedDashDash(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this._emitChars('-');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n          this._emitChars('<');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.SCRIPT_DATA;\n          this._emitChars('>');\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // Script data double escaped less-than sign state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapedLessThanSign(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n      this._emitChars('/');\n    } else {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  }\n  // Script data double escape end state\n  //------------------------------------------------------------------\n  _stateScriptDataDoubleEscapeEnd(cp) {\n    if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) && isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n      this._emitCodePoint(cp);\n      for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n        this._emitCodePoint(this._consume());\n      }\n      this.state = State.SCRIPT_DATA_ESCAPED;\n    } else if (!this._ensureHibernation()) {\n      this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n      this._stateScriptDataDoubleEscaped(cp);\n    }\n  }\n  // Before attribute name state\n  //------------------------------------------------------------------\n  _stateBeforeAttributeName(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n          this._stateAfterAttributeName(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedEqualsSignBeforeAttributeName);\n          this._createAttr('=');\n          this.state = State.ATTRIBUTE_NAME;\n          break;\n        }\n      default:\n        {\n          this._createAttr('');\n          this.state = State.ATTRIBUTE_NAME;\n          this._stateAttributeName(cp);\n        }\n    }\n  }\n  // Attribute name state\n  //------------------------------------------------------------------\n  _stateAttributeName(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._leaveAttrName();\n          this.state = State.AFTER_ATTRIBUTE_NAME;\n          this._stateAfterAttributeName(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n        {\n          this._leaveAttrName();\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedCharacterInAttributeName);\n          this.currentAttr.name += String.fromCodePoint(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.currentAttr.name += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      default:\n        {\n          this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  }\n  // After attribute name state\n  //------------------------------------------------------------------\n  _stateAfterAttributeName(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n        {\n          this.state = State.BEFORE_ATTRIBUTE_VALUE;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._createAttr('');\n          this.state = State.ATTRIBUTE_NAME;\n          this._stateAttributeName(cp);\n        }\n    }\n  }\n  // Before attribute value state\n  //------------------------------------------------------------------\n  _stateBeforeAttributeValue(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingAttributeValue);\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      default:\n        {\n          this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n          this._stateAttributeValueUnquoted(cp);\n        }\n    }\n  }\n  // Attribute value (double-quoted) state\n  //------------------------------------------------------------------\n  _stateAttributeValueDoubleQuoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Attribute value (single-quoted) state\n  //------------------------------------------------------------------\n  _stateAttributeValueSingleQuoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Attribute value (unquoted) state\n  //------------------------------------------------------------------\n  _stateAttributeValueUnquoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this._leaveAttrValue();\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.AMPERSAND:\n        {\n          this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n          this.state = State.CHARACTER_REFERENCE;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n      case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n      case unicode_js_1.CODE_POINTS.GRAVE_ACCENT:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedCharacterInUnquotedAttributeValue);\n          this.currentAttr.value += String.fromCodePoint(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this.currentAttr.value += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // After attribute value (quoted) state\n  //------------------------------------------------------------------\n  _stateAfterAttributeValueQuoted(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this._leaveAttrValue();\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.SOLIDUS:\n        {\n          this._leaveAttrValue();\n          this.state = State.SELF_CLOSING_START_TAG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._leaveAttrValue();\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBetweenAttributes);\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  }\n  // Self-closing start tag state\n  //------------------------------------------------------------------\n  _stateSelfClosingStartTag(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          const token = this.currentToken;\n          token.selfClosing = true;\n          this.state = State.DATA;\n          this.emitCurrentTagToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInTag);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedSolidusInTag);\n          this.state = State.BEFORE_ATTRIBUTE_NAME;\n          this._stateBeforeAttributeName(cp);\n        }\n    }\n  }\n  // Bogus comment state\n  //------------------------------------------------------------------\n  _stateBogusComment(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Markup declaration open state\n  //------------------------------------------------------------------\n  _stateMarkupDeclarationOpen(cp) {\n    if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DASH_DASH, true)) {\n      this._createCommentToken(unicode_js_1.SEQUENCES.DASH_DASH.length + 1);\n      this.state = State.COMMENT_START;\n    } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DOCTYPE, false)) {\n      // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n      this.currentLocation = this.getCurrentLocation(unicode_js_1.SEQUENCES.DOCTYPE.length + 1);\n      this.state = State.DOCTYPE;\n    } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.CDATA_START, true)) {\n      if (this.inForeignNode) {\n        this.state = State.CDATA_SECTION;\n      } else {\n        this._err(error_codes_js_1.ERR.cdataInHtmlContent);\n        this._createCommentToken(unicode_js_1.SEQUENCES.CDATA_START.length + 1);\n        this.currentToken.data = '[CDATA[';\n        this.state = State.BOGUS_COMMENT;\n      }\n    }\n    //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n    //results are no longer valid and we will need to start over.\n    else if (!this._ensureHibernation()) {\n      this._err(error_codes_js_1.ERR.incorrectlyOpenedComment);\n      this._createCommentToken(2);\n      this.state = State.BOGUS_COMMENT;\n      this._stateBogusComment(cp);\n    }\n  }\n  // Comment start state\n  //------------------------------------------------------------------\n  _stateCommentStart(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_START_DASH;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n          this.state = State.DATA;\n          const token = this.currentToken;\n          this.emitCurrentComment(token);\n          break;\n        }\n      default:\n        {\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment start dash state\n  //------------------------------------------------------------------\n  _stateCommentStartDash(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment state\n  //------------------------------------------------------------------\n  _stateComment(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          this.state = State.COMMENT_LESS_THAN_SIGN;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // Comment less-than sign state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSign(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          token.data += '!';\n          this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n        {\n          token.data += '<';\n          break;\n        }\n      default:\n        {\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment less-than sign bang state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSignBang(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n    } else {\n      this.state = State.COMMENT;\n      this._stateComment(cp);\n    }\n  }\n  // Comment less-than sign bang dash state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSignBangDash(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n      this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n    } else {\n      this.state = State.COMMENT_END_DASH;\n      this._stateCommentEndDash(cp);\n    }\n  }\n  // Comment less-than sign bang dash dash state\n  //------------------------------------------------------------------\n  _stateCommentLessThanSignBangDashDash(cp) {\n    if (cp !== unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN && cp !== unicode_js_1.CODE_POINTS.EOF) {\n      this._err(error_codes_js_1.ERR.nestedComment);\n    }\n    this.state = State.COMMENT_END;\n    this._stateCommentEnd(cp);\n  }\n  // Comment end dash state\n  //------------------------------------------------------------------\n  _stateCommentEndDash(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          this.state = State.COMMENT_END;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '-';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment end state\n  //------------------------------------------------------------------\n  _stateCommentEnd(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK:\n        {\n          this.state = State.COMMENT_END_BANG;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          token.data += '-';\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '--';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // Comment end bang state\n  //------------------------------------------------------------------\n  _stateCommentEndBang(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.HYPHEN_MINUS:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT_END_DASH;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.incorrectlyClosedComment);\n          this.state = State.DATA;\n          this.emitCurrentComment(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInComment);\n          this.emitCurrentComment(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.data += '--!';\n          this.state = State.COMMENT;\n          this._stateComment(cp);\n        }\n    }\n  }\n  // DOCTYPE state\n  //------------------------------------------------------------------\n  _stateDoctype(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          this._stateBeforeDoctypeName(cp);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          this._createDoctypeToken(null);\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBeforeDoctypeName);\n          this.state = State.BEFORE_DOCTYPE_NAME;\n          this._stateBeforeDoctypeName(cp);\n        }\n    }\n  }\n  // Before DOCTYPE name state\n  //------------------------------------------------------------------\n  _stateBeforeDoctypeName(cp) {\n    if (isAsciiUpper(cp)) {\n      this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n      this.state = State.DOCTYPE_NAME;\n    } else switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          this._createDoctypeToken(unicode_js_1.REPLACEMENT_CHARACTER);\n          this.state = State.DOCTYPE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypeName);\n          this._createDoctypeToken(null);\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          this._createDoctypeToken(null);\n          const token = this.currentToken;\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._createDoctypeToken(String.fromCodePoint(cp));\n          this.state = State.DOCTYPE_NAME;\n        }\n    }\n  }\n  // DOCTYPE name state\n  //------------------------------------------------------------------\n  _stateDoctypeName(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.AFTER_DOCTYPE_NAME;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.name += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n        }\n    }\n  }\n  // After DOCTYPE name state\n  //------------------------------------------------------------------\n  _stateAfterDoctypeName(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.PUBLIC, false)) {\n            this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n          } else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.SYSTEM, false)) {\n            this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n          }\n          //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n          //results are no longer valid and we will need to start over.\n          else if (!this._ensureHibernation()) {\n            this._err(error_codes_js_1.ERR.invalidCharacterSequenceAfterDoctypeName);\n            token.forceQuirks = true;\n            this.state = State.BOGUS_DOCTYPE;\n            this._stateBogusDoctype(cp);\n          }\n        }\n    }\n  }\n  // After DOCTYPE public keyword state\n  //------------------------------------------------------------------\n  _stateAfterDoctypePublicKeyword(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Before DOCTYPE public identifier state\n  //------------------------------------------------------------------\n  _stateBeforeDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          token.publicId = '';\n          this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // DOCTYPE public identifier (double-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // DOCTYPE public identifier (single-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypePublicIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.publicId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // After DOCTYPE public identifier state\n  //------------------------------------------------------------------\n  _stateAfterDoctypePublicIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Between DOCTYPE public and system identifiers state\n  //------------------------------------------------------------------\n  _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // After DOCTYPE system keyword state\n  //------------------------------------------------------------------\n  _stateAfterDoctypeSystemKeyword(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Before DOCTYPE system identifier state\n  //------------------------------------------------------------------\n  _stateBeforeDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          token.systemId = '';\n          this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.DATA;\n          this.emitCurrentDoctype(token);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // DOCTYPE system identifier (double-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // DOCTYPE system identifier (single-quoted) state\n  //------------------------------------------------------------------\n  _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.APOSTROPHE:\n        {\n          this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          token.systemId += String.fromCodePoint(cp);\n        }\n    }\n  }\n  // After DOCTYPE system identifier state\n  //------------------------------------------------------------------\n  _stateAfterDoctypeSystemIdentifier(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.SPACE:\n      case unicode_js_1.CODE_POINTS.LINE_FEED:\n      case unicode_js_1.CODE_POINTS.TABULATION:\n      case unicode_js_1.CODE_POINTS.FORM_FEED:\n        {\n          // Ignore whitespace\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInDoctype);\n          token.forceQuirks = true;\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n          this.state = State.BOGUS_DOCTYPE;\n          this._stateBogusDoctype(cp);\n        }\n    }\n  }\n  // Bogus DOCTYPE state\n  //------------------------------------------------------------------\n  _stateBogusDoctype(cp) {\n    const token = this.currentToken;\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.emitCurrentDoctype(token);\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.NULL:\n        {\n          this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this.emitCurrentDoctype(token);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n      // Do nothing\n    }\n  }\n  // CDATA section state\n  //------------------------------------------------------------------\n  _stateCdataSection(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n        {\n          this.state = State.CDATA_SECTION_BRACKET;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.EOF:\n        {\n          this._err(error_codes_js_1.ERR.eofInCdata);\n          this._emitEOFToken();\n          break;\n        }\n      default:\n        {\n          this._emitCodePoint(cp);\n        }\n    }\n  }\n  // CDATA section bracket state\n  //------------------------------------------------------------------\n  _stateCdataSectionBracket(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET) {\n      this.state = State.CDATA_SECTION_END;\n    } else {\n      this._emitChars(']');\n      this.state = State.CDATA_SECTION;\n      this._stateCdataSection(cp);\n    }\n  }\n  // CDATA section end state\n  //------------------------------------------------------------------\n  _stateCdataSectionEnd(cp) {\n    switch (cp) {\n      case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n        {\n          this.state = State.DATA;\n          break;\n        }\n      case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET:\n        {\n          this._emitChars(']');\n          break;\n        }\n      default:\n        {\n          this._emitChars(']]');\n          this.state = State.CDATA_SECTION;\n          this._stateCdataSection(cp);\n        }\n    }\n  }\n  // Character reference state\n  //------------------------------------------------------------------\n  _stateCharacterReference(cp) {\n    if (cp === unicode_js_1.CODE_POINTS.NUMBER_SIGN) {\n      this.state = State.NUMERIC_CHARACTER_REFERENCE;\n    } else if (isAsciiAlphaNumeric(cp)) {\n      this.state = State.NAMED_CHARACTER_REFERENCE;\n      this._stateNamedCharacterReference(cp);\n    } else {\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n      this._reconsumeInState(this.returnState, cp);\n    }\n  }\n  // Named character reference state\n  //------------------------------------------------------------------\n  _stateNamedCharacterReference(cp) {\n    const matchResult = this._matchNamedCharacterReference(cp);\n    //NOTE: Matching can be abrupted by hibernation. In that case, match\n    //results are no longer valid and we will need to start over.\n    if (this._ensureHibernation()) {\n      // Stay in the state, try again.\n    } else if (matchResult) {\n      for (let i = 0; i < matchResult.length; i++) {\n        this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n      }\n      this.state = this.returnState;\n    } else {\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n      this.state = State.AMBIGUOUS_AMPERSAND;\n    }\n  }\n  // Ambiguos ampersand state\n  //------------------------------------------------------------------\n  _stateAmbiguousAmpersand(cp) {\n    if (isAsciiAlphaNumeric(cp)) {\n      this._flushCodePointConsumedAsCharacterReference(cp);\n    } else {\n      if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n        this._err(error_codes_js_1.ERR.unknownNamedCharacterReference);\n      }\n      this._reconsumeInState(this.returnState, cp);\n    }\n  }\n  // Numeric character reference state\n  //------------------------------------------------------------------\n  _stateNumericCharacterReference(cp) {\n    this.charRefCode = 0;\n    if (cp === unicode_js_1.CODE_POINTS.LATIN_SMALL_X || cp === unicode_js_1.CODE_POINTS.LATIN_CAPITAL_X) {\n      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n    }\n    // Inlined decimal character reference start state\n    else if (isAsciiDigit(cp)) {\n      this.state = State.DECIMAL_CHARACTER_REFERENCE;\n      this._stateDecimalCharacterReference(cp);\n    } else {\n      this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n      this._reconsumeInState(this.returnState, cp);\n    }\n  }\n  // Hexademical character reference start state\n  //------------------------------------------------------------------\n  _stateHexademicalCharacterReferenceStart(cp) {\n    if (isAsciiHexDigit(cp)) {\n      this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n      this._stateHexademicalCharacterReference(cp);\n    } else {\n      this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n      this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n      this._unconsume(2);\n      this.state = this.returnState;\n    }\n  }\n  // Hexademical character reference state\n  //------------------------------------------------------------------\n  _stateHexademicalCharacterReference(cp) {\n    if (isAsciiUpperHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n    } else if (isAsciiLowerHexDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n    } else if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n    } else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n    } else {\n      this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n      this._stateNumericCharacterReferenceEnd(cp);\n    }\n  }\n  // Decimal character reference state\n  //------------------------------------------------------------------\n  _stateDecimalCharacterReference(cp) {\n    if (isAsciiDigit(cp)) {\n      this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n    } else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n    } else {\n      this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n      this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n      this._stateNumericCharacterReferenceEnd(cp);\n    }\n  }\n  // Numeric character reference end state\n  //------------------------------------------------------------------\n  _stateNumericCharacterReferenceEnd(cp) {\n    if (this.charRefCode === unicode_js_1.CODE_POINTS.NULL) {\n      this._err(error_codes_js_1.ERR.nullCharacterReference);\n      this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n    } else if (this.charRefCode > 1114111) {\n      this._err(error_codes_js_1.ERR.characterReferenceOutsideUnicodeRange);\n      this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n    } else if ((0, unicode_js_1.isSurrogate)(this.charRefCode)) {\n      this._err(error_codes_js_1.ERR.surrogateCharacterReference);\n      this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n    } else if ((0, unicode_js_1.isUndefinedCodePoint)(this.charRefCode)) {\n      this._err(error_codes_js_1.ERR.noncharacterCharacterReference);\n    } else if ((0, unicode_js_1.isControlCodePoint)(this.charRefCode) || this.charRefCode === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n      this._err(error_codes_js_1.ERR.controlCharacterReference);\n      const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n      if (replacement !== undefined) {\n        this.charRefCode = replacement;\n      }\n    }\n    this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n    this._reconsumeInState(this.returnState, cp);\n  }\n}\nexports.Tokenizer = Tokenizer;","map":{"version":3,"names":["Object","defineProperty","exports","value","Tokenizer","TokenizerMode","preprocessor_js_1","require","unicode_js_1","token_js_1","decode_js_1","error_codes_js_1","html_js_1","C1_CONTROLS_REFERENCE_REPLACEMENTS","Map","State","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","PLAINTEXT","CDATA_SECTION","isAsciiDigit","cp","CODE_POINTS","DIGIT_0","DIGIT_9","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLower","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLetter","isAsciiAlphaNumeric","isAsciiUpperHexDigit","LATIN_CAPITAL_F","isAsciiLowerHexDigit","LATIN_SMALL_F","isAsciiHexDigit","toAsciiLower","isWhitespace","SPACE","LINE_FEED","TABULATION","FORM_FEED","isEntityInAttributeInvalidEnd","nextCp","EQUALS_SIGN","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","constructor","options","handler","paused","inLoop","inForeignNode","lastStartTagName","active","state","returnState","charRefCode","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","name","preprocessor","Preprocessor","currentLocation","getCurrentLocation","_err","code","_a","_b","onParseError","call","getError","offset","sourceCodeLocationInfo","startLine","line","startCol","col","startOffset","endLine","endCol","endOffset","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","resume","writeCallback","Error","write","chunk","isLastChunk","insertHtmlAtCurrentPos","endOfChunkHit","_unconsume","advance","count","retreat","_reconsumeInState","_advanceBy","i","_consumeSequenceIfMatch","pattern","caseSensitive","startsWith","length","_createStartTagToken","type","TokenType","START_TAG","tagName","tagID","TAG_ID","UNKNOWN","selfClosing","ackSelfClosing","attrs","location","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","data","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","publicId","systemId","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","token","getTokenAttr","push","attrLocations","create","_leaveAttrValue","ERR","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","getTagID","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","dropParsedChunk","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","EOF","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","NULL","String","fromCodePoint","_emitChars","_matchNamedCharacterReference","result","excess","withoutSemicolon","current","htmlDecodeTree","determineBranch","masked","BinTrieFlags","VALUE_LENGTH","valueLength","SEMICOLON","_isCharacterReferenceInAttribute","peek","AMPERSAND","missingSemicolonAfterCharacterReference","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_flushCodePointConsumedAsCharacterReference","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","CHARACTER_REFERENCE","_stateCharacterReference","NAMED_CHARACTER_REFERENCE","_stateNamedCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","NUMERIC_CHARACTER_REFERENCE","_stateNumericCharacterReference","HEXADEMICAL_CHARACTER_REFERENCE_START","_stateHexademicalCharacterReferenceStart","HEXADEMICAL_CHARACTER_REFERENCE","_stateHexademicalCharacterReference","DECIMAL_CHARACTER_REFERENCE","_stateDecimalCharacterReference","NUMERIC_CHARACTER_REFERENCE_END","_stateNumericCharacterReferenceEnd","LESS_THAN_SIGN","unexpectedNullCharacter","REPLACEMENT_CHARACTER","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","SEQUENCES","SCRIPT","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","DASH_DASH","CDATA_START","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","fromCharCode","missingDoctypeName","PUBLIC","SYSTEM","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","NUMBER_SIGN","matchResult","unknownNamedCharacterReference","LATIN_SMALL_X","LATIN_CAPITAL_X","absenceOfDigitsInNumericCharacterReference","nullCharacterReference","characterReferenceOutsideUnicodeRange","isSurrogate","surrogateCharacterReference","isUndefinedCodePoint","noncharacterCharacterReference","isControlCodePoint","CARRIAGE_RETURN","controlCharacterReference","replacement","get","undefined"],"sources":["C:/Users/vedic/node_modules/parse5/dist/cjs/tokenizer/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Tokenizer = exports.TokenizerMode = void 0;\nconst preprocessor_js_1 = require(\"./preprocessor.js\");\nconst unicode_js_1 = require(\"../common/unicode.js\");\nconst token_js_1 = require(\"../common/token.js\");\nconst decode_js_1 = require(\"entities/lib/decode.js\");\nconst error_codes_js_1 = require(\"../common/error-codes.js\");\nconst html_js_1 = require(\"../common/html.js\");\n//C1 Unicode control character reference replacements\nconst C1_CONTROLS_REFERENCE_REPLACEMENTS = new Map([\n    [0x80, 8364],\n    [0x82, 8218],\n    [0x83, 402],\n    [0x84, 8222],\n    [0x85, 8230],\n    [0x86, 8224],\n    [0x87, 8225],\n    [0x88, 710],\n    [0x89, 8240],\n    [0x8a, 352],\n    [0x8b, 8249],\n    [0x8c, 338],\n    [0x8e, 381],\n    [0x91, 8216],\n    [0x92, 8217],\n    [0x93, 8220],\n    [0x94, 8221],\n    [0x95, 8226],\n    [0x96, 8211],\n    [0x97, 8212],\n    [0x98, 732],\n    [0x99, 8482],\n    [0x9a, 353],\n    [0x9b, 8250],\n    [0x9c, 339],\n    [0x9e, 382],\n    [0x9f, 376],\n]);\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"NAMED_CHARACTER_REFERENCE\"] = 72] = \"NAMED_CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 73] = \"AMBIGUOUS_AMPERSAND\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE\"] = 74] = \"NUMERIC_CHARACTER_REFERENCE\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE_START\"] = 75] = \"HEXADEMICAL_CHARACTER_REFERENCE_START\";\n    State[State[\"HEXADEMICAL_CHARACTER_REFERENCE\"] = 76] = \"HEXADEMICAL_CHARACTER_REFERENCE\";\n    State[State[\"DECIMAL_CHARACTER_REFERENCE\"] = 77] = \"DECIMAL_CHARACTER_REFERENCE\";\n    State[State[\"NUMERIC_CHARACTER_REFERENCE_END\"] = 78] = \"NUMERIC_CHARACTER_REFERENCE_END\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexports.TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.DIGIT_0 && cp <= unicode_js_1.CODE_POINTS.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction isAsciiUpperHexDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_CAPITAL_F;\n}\nfunction isAsciiLowerHexDigit(cp) {\n    return cp >= unicode_js_1.CODE_POINTS.LATIN_SMALL_A && cp <= unicode_js_1.CODE_POINTS.LATIN_SMALL_F;\n}\nfunction isAsciiHexDigit(cp) {\n    return isAsciiDigit(cp) || isAsciiUpperHexDigit(cp) || isAsciiLowerHexDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === unicode_js_1.CODE_POINTS.SPACE || cp === unicode_js_1.CODE_POINTS.LINE_FEED || cp === unicode_js_1.CODE_POINTS.TABULATION || cp === unicode_js_1.CODE_POINTS.FORM_FEED;\n}\nfunction isEntityInAttributeInvalidEnd(nextCp) {\n    return nextCp === unicode_js_1.CODE_POINTS.EQUALS_SIGN || isAsciiAlphaNumeric(nextCp);\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === unicode_js_1.CODE_POINTS.SOLIDUS || cp === unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN;\n}\n//Tokenizer\nclass Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.charRefCode = -1;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new preprocessor_js_1.Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    //Errors\n    _err(code) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this._unconsume(this.consumedAfterSnapshot);\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _unconsume(count) {\n        this.consumedAfterSnapshot -= count;\n        this.preprocessor.retreat(count);\n    }\n    _reconsumeInState(state, cp) {\n        this.state = state;\n        this._callState(cp);\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.START_TAG,\n            tagName: '',\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: token_js_1.TokenType.END_TAG,\n            tagName: '',\n            tagID: html_js_1.TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: token_js_1.TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: token_js_1.TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if ((0, token_js_1.getTokenAttr)(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(error_codes_js_1.ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = (0, html_js_1.getTagID)(ct.tagName);\n        if (ct.type === token_js_1.TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(error_codes_js_1.ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(error_codes_js_1.ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case token_js_1.TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case token_js_1.TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case token_js_1.TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: token_js_1.TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: specification uses only one type of character tokens (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type !== type) {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n            else {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? token_js_1.TokenType.WHITESPACE_CHARACTER\n            : cp === unicode_js_1.CODE_POINTS.NULL\n                ? token_js_1.TokenType.NULL_CHARACTER\n                : token_js_1.TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(token_js_1.TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _matchNamedCharacterReference(cp) {\n        let result = null;\n        let excess = 0;\n        let withoutSemicolon = false;\n        for (let i = 0, current = decode_js_1.htmlDecodeTree[0]; i >= 0; cp = this._consume()) {\n            i = (0, decode_js_1.determineBranch)(decode_js_1.htmlDecodeTree, current, i + 1, cp);\n            if (i < 0)\n                break;\n            excess += 1;\n            current = decode_js_1.htmlDecodeTree[i];\n            const masked = current & decode_js_1.BinTrieFlags.VALUE_LENGTH;\n            // If the branch is a value, store it and continue\n            if (masked) {\n                // The mask is the number of bytes of the value, including the current byte.\n                const valueLength = (masked >> 14) - 1;\n                // Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n                // See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n                if (cp !== unicode_js_1.CODE_POINTS.SEMICOLON &&\n                    this._isCharacterReferenceInAttribute() &&\n                    isEntityInAttributeInvalidEnd(this.preprocessor.peek(1))) {\n                    //NOTE: we don't flush all consumed code points here, and instead switch back to the original state after\n                    //emitting an ampersand. This is fine, as alphanumeric characters won't be parsed differently in attributes.\n                    result = [unicode_js_1.CODE_POINTS.AMPERSAND];\n                    // Skip over the value.\n                    i += valueLength;\n                }\n                else {\n                    // If this is a surrogate pair, consume the next two bytes.\n                    result =\n                        valueLength === 0\n                            ? [decode_js_1.htmlDecodeTree[i] & ~decode_js_1.BinTrieFlags.VALUE_LENGTH]\n                            : valueLength === 1\n                                ? [decode_js_1.htmlDecodeTree[++i]]\n                                : [decode_js_1.htmlDecodeTree[++i], decode_js_1.htmlDecodeTree[++i]];\n                    excess = 0;\n                    withoutSemicolon = cp !== unicode_js_1.CODE_POINTS.SEMICOLON;\n                }\n                if (valueLength === 0) {\n                    // If the value is zero-length, we're done.\n                    this._consume();\n                    break;\n                }\n            }\n        }\n        this._unconsume(excess);\n        if (withoutSemicolon && !this.preprocessor.endOfChunkHit) {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n        }\n        // We want to emit the error above on the code point after the entity.\n        // We always consume one code point too many in the loop, and we wait to\n        // unconsume it until after the error is emitted.\n        this._unconsume(1);\n        return result;\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference(cp);\n                break;\n            }\n            case State.NAMED_CHARACTER_REFERENCE: {\n                this._stateNamedCharacterReference(cp);\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE: {\n                this._stateNumericCharacterReference(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE_START: {\n                this._stateHexademicalCharacterReferenceStart(cp);\n                break;\n            }\n            case State.HEXADEMICAL_CHARACTER_REFERENCE: {\n                this._stateHexademicalCharacterReference(cp);\n                break;\n            }\n            case State.DECIMAL_CHARACTER_REFERENCE: {\n                this._stateDecimalCharacterReference(cp);\n                break;\n            }\n            case State.NUMERIC_CHARACTER_REFERENCE_END: {\n                this._stateNumericCharacterReferenceEnd(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.DATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.RCDATA;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.QUESTION_MARK: {\n                    this._err(error_codes_js_1.ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.EOF: {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                    this._err(error_codes_js_1.ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.EOF: {\n                    this._err(error_codes_js_1.ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(error_codes_js_1.ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.tagName += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(unicode_js_1.REPLACEMENT_CHARACTER);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith(unicode_js_1.SEQUENCES.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek(unicode_js_1.SEQUENCES.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < unicode_js_1.SEQUENCES.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN: {\n                this._err(error_codes_js_1.ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED:\n            case unicode_js_1.CODE_POINTS.SOLIDUS:\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.AMPERSAND: {\n                this.returnState = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this.state = State.CHARACTER_REFERENCE;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                this.currentAttr.value += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK:\n            case unicode_js_1.CODE_POINTS.APOSTROPHE:\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN:\n            case unicode_js_1.CODE_POINTS.EQUALS_SIGN:\n            case unicode_js_1.CODE_POINTS.GRAVE_ACCENT: {\n                this._err(error_codes_js_1.ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DASH_DASH, true)) {\n            this._createCommentToken(unicode_js_1.SEQUENCES.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation(unicode_js_1.SEQUENCES.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(error_codes_js_1.ERR.cdataInHtmlContent);\n                this._createCommentToken(unicode_js_1.SEQUENCES.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(error_codes_js_1.ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.data += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN && cp !== unicode_js_1.CODE_POINTS.EOF) {\n            this._err(error_codes_js_1.ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case unicode_js_1.CODE_POINTS.SPACE:\n                case unicode_js_1.CODE_POINTS.LINE_FEED:\n                case unicode_js_1.CODE_POINTS.TABULATION:\n                case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.NULL: {\n                    this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(unicode_js_1.REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                    this._err(error_codes_js_1.ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case unicode_js_1.CODE_POINTS.EOF: {\n                    this._err(error_codes_js_1.ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.name += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch(unicode_js_1.SEQUENCES.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(error_codes_js_1.ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.publicId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this._err(error_codes_js_1.ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                token.systemId += unicode_js_1.REPLACEMENT_CHARACTER;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this._err(error_codes_js_1.ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.SPACE:\n            case unicode_js_1.CODE_POINTS.LINE_FEED:\n            case unicode_js_1.CODE_POINTS.TABULATION:\n            case unicode_js_1.CODE_POINTS.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(error_codes_js_1.ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.NULL: {\n                this._err(error_codes_js_1.ERR.unexpectedNullCharacter);\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.EOF: {\n                this._err(error_codes_js_1.ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case unicode_js_1.CODE_POINTS.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case unicode_js_1.CODE_POINTS.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference(cp) {\n        if (cp === unicode_js_1.CODE_POINTS.NUMBER_SIGN) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE;\n        }\n        else if (isAsciiAlphaNumeric(cp)) {\n            this.state = State.NAMED_CHARACTER_REFERENCE;\n            this._stateNamedCharacterReference(cp);\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Named character reference state\n    //------------------------------------------------------------------\n    _stateNamedCharacterReference(cp) {\n        const matchResult = this._matchNamedCharacterReference(cp);\n        //NOTE: Matching can be abrupted by hibernation. In that case, match\n        //results are no longer valid and we will need to start over.\n        if (this._ensureHibernation()) {\n            // Stay in the state, try again.\n        }\n        else if (matchResult) {\n            for (let i = 0; i < matchResult.length; i++) {\n                this._flushCodePointConsumedAsCharacterReference(matchResult[i]);\n            }\n            this.state = this.returnState;\n        }\n        else {\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this.state = State.AMBIGUOUS_AMPERSAND;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n                this._err(error_codes_js_1.ERR.unknownNamedCharacterReference);\n            }\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Numeric character reference state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReference(cp) {\n        this.charRefCode = 0;\n        if (cp === unicode_js_1.CODE_POINTS.LATIN_SMALL_X || cp === unicode_js_1.CODE_POINTS.LATIN_CAPITAL_X) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE_START;\n        }\n        // Inlined decimal character reference start state\n        else if (isAsciiDigit(cp)) {\n            this.state = State.DECIMAL_CHARACTER_REFERENCE;\n            this._stateDecimalCharacterReference(cp);\n        }\n        else {\n            this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n            this._reconsumeInState(this.returnState, cp);\n        }\n    }\n    // Hexademical character reference start state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReferenceStart(cp) {\n        if (isAsciiHexDigit(cp)) {\n            this.state = State.HEXADEMICAL_CHARACTER_REFERENCE;\n            this._stateHexademicalCharacterReference(cp);\n        }\n        else {\n            this._err(error_codes_js_1.ERR.absenceOfDigitsInNumericCharacterReference);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.AMPERSAND);\n            this._flushCodePointConsumedAsCharacterReference(unicode_js_1.CODE_POINTS.NUMBER_SIGN);\n            this._unconsume(2);\n            this.state = this.returnState;\n        }\n    }\n    // Hexademical character reference state\n    //------------------------------------------------------------------\n    _stateHexademicalCharacterReference(cp) {\n        if (isAsciiUpperHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x37;\n        }\n        else if (isAsciiLowerHexDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x57;\n        }\n        else if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 16 + cp - 0x30;\n        }\n        else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Decimal character reference state\n    //------------------------------------------------------------------\n    _stateDecimalCharacterReference(cp) {\n        if (isAsciiDigit(cp)) {\n            this.charRefCode = this.charRefCode * 10 + cp - 0x30;\n        }\n        else if (cp === unicode_js_1.CODE_POINTS.SEMICOLON) {\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n        }\n        else {\n            this._err(error_codes_js_1.ERR.missingSemicolonAfterCharacterReference);\n            this.state = State.NUMERIC_CHARACTER_REFERENCE_END;\n            this._stateNumericCharacterReferenceEnd(cp);\n        }\n    }\n    // Numeric character reference end state\n    //------------------------------------------------------------------\n    _stateNumericCharacterReferenceEnd(cp) {\n        if (this.charRefCode === unicode_js_1.CODE_POINTS.NULL) {\n            this._err(error_codes_js_1.ERR.nullCharacterReference);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        }\n        else if (this.charRefCode > 1114111) {\n            this._err(error_codes_js_1.ERR.characterReferenceOutsideUnicodeRange);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        }\n        else if ((0, unicode_js_1.isSurrogate)(this.charRefCode)) {\n            this._err(error_codes_js_1.ERR.surrogateCharacterReference);\n            this.charRefCode = unicode_js_1.CODE_POINTS.REPLACEMENT_CHARACTER;\n        }\n        else if ((0, unicode_js_1.isUndefinedCodePoint)(this.charRefCode)) {\n            this._err(error_codes_js_1.ERR.noncharacterCharacterReference);\n        }\n        else if ((0, unicode_js_1.isControlCodePoint)(this.charRefCode) || this.charRefCode === unicode_js_1.CODE_POINTS.CARRIAGE_RETURN) {\n            this._err(error_codes_js_1.ERR.controlCharacterReference);\n            const replacement = C1_CONTROLS_REFERENCE_REPLACEMENTS.get(this.charRefCode);\n            if (replacement !== undefined) {\n                this.charRefCode = replacement;\n            }\n        }\n        this._flushCodePointConsumedAsCharacterReference(this.charRefCode);\n        this._reconsumeInState(this.returnState, cp);\n    }\n}\nexports.Tokenizer = Tokenizer;\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}