{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.serializeOuter = exports.serialize = void 0;\nconst html_js_1 = require(\"../common/html.js\");\nconst escape_js_1 = require(\"entities/lib/escape.js\");\nconst default_js_1 = require(\"../tree-adapters/default.js\");\n// Sets\nconst VOID_ELEMENTS = new Set([html_js_1.TAG_NAMES.AREA, html_js_1.TAG_NAMES.BASE, html_js_1.TAG_NAMES.BASEFONT, html_js_1.TAG_NAMES.BGSOUND, html_js_1.TAG_NAMES.BR, html_js_1.TAG_NAMES.COL, html_js_1.TAG_NAMES.EMBED, html_js_1.TAG_NAMES.FRAME, html_js_1.TAG_NAMES.HR, html_js_1.TAG_NAMES.IMG, html_js_1.TAG_NAMES.INPUT, html_js_1.TAG_NAMES.KEYGEN, html_js_1.TAG_NAMES.LINK, html_js_1.TAG_NAMES.META, html_js_1.TAG_NAMES.PARAM, html_js_1.TAG_NAMES.SOURCE, html_js_1.TAG_NAMES.TRACK, html_js_1.TAG_NAMES.WBR]);\nfunction isVoidElement(node, options) {\n  return options.treeAdapter.isElementNode(node) && options.treeAdapter.getNamespaceURI(node) === html_js_1.NS.HTML && VOID_ELEMENTS.has(options.treeAdapter.getTagName(node));\n}\nconst defaultOpts = {\n  treeAdapter: default_js_1.defaultTreeAdapter,\n  scriptingEnabled: true\n};\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nfunction serialize(node, options) {\n  const opts = Object.assign(Object.assign({}, defaultOpts), options);\n  if (isVoidElement(node, opts)) {\n    return '';\n  }\n  return serializeChildNodes(node, opts);\n}\nexports.serialize = serialize;\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nfunction serializeOuter(node, options) {\n  const opts = Object.assign(Object.assign({}, defaultOpts), options);\n  return serializeNode(node, opts);\n}\nexports.serializeOuter = serializeOuter;\nfunction serializeChildNodes(parentNode, options) {\n  let html = '';\n  // Get container of the child nodes\n  const container = options.treeAdapter.isElementNode(parentNode) && options.treeAdapter.getTagName(parentNode) === html_js_1.TAG_NAMES.TEMPLATE && options.treeAdapter.getNamespaceURI(parentNode) === html_js_1.NS.HTML ? options.treeAdapter.getTemplateContent(parentNode) : parentNode;\n  const childNodes = options.treeAdapter.getChildNodes(container);\n  if (childNodes) {\n    for (const currentNode of childNodes) {\n      html += serializeNode(currentNode, options);\n    }\n  }\n  return html;\n}\nfunction serializeNode(node, options) {\n  if (options.treeAdapter.isElementNode(node)) {\n    return serializeElement(node, options);\n  }\n  if (options.treeAdapter.isTextNode(node)) {\n    return serializeTextNode(node, options);\n  }\n  if (options.treeAdapter.isCommentNode(node)) {\n    return serializeCommentNode(node, options);\n  }\n  if (options.treeAdapter.isDocumentTypeNode(node)) {\n    return serializeDocumentTypeNode(node, options);\n  }\n  // Return an empty string for unknown nodes\n  return '';\n}\nfunction serializeElement(node, options) {\n  const tn = options.treeAdapter.getTagName(node);\n  return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, _ref) {\n  let {\n    treeAdapter\n  } = _ref;\n  let html = '';\n  for (const attr of treeAdapter.getAttrList(node)) {\n    html += ' ';\n    if (!attr.namespace) {\n      html += attr.name;\n    } else switch (attr.namespace) {\n      case html_js_1.NS.XML:\n        {\n          html += `xml:${attr.name}`;\n          break;\n        }\n      case html_js_1.NS.XMLNS:\n        {\n          if (attr.name !== 'xmlns') {\n            html += 'xmlns:';\n          }\n          html += attr.name;\n          break;\n        }\n      case html_js_1.NS.XLINK:\n        {\n          html += `xlink:${attr.name}`;\n          break;\n        }\n      default:\n        {\n          html += `${attr.prefix}:${attr.name}`;\n        }\n    }\n    html += `=\"${(0, escape_js_1.escapeAttribute)(attr.value)}\"`;\n  }\n  return html;\n}\nfunction serializeTextNode(node, options) {\n  const {\n    treeAdapter\n  } = options;\n  const content = treeAdapter.getTextNodeContent(node);\n  const parent = treeAdapter.getParentNode(node);\n  const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n  return parentTn && treeAdapter.getNamespaceURI(parent) === html_js_1.NS.HTML && (0, html_js_1.hasUnescapedText)(parentTn, options.scriptingEnabled) ? content : (0, escape_js_1.escapeText)(content);\n}\nfunction serializeCommentNode(node, _ref2) {\n  let {\n    treeAdapter\n  } = _ref2;\n  return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, _ref3) {\n  let {\n    treeAdapter\n  } = _ref3;\n  return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}","map":{"version":3,"names":["Object","defineProperty","exports","value","serializeOuter","serialize","html_js_1","require","escape_js_1","default_js_1","VOID_ELEMENTS","Set","TAG_NAMES","AREA","BASE","BASEFONT","BGSOUND","BR","COL","EMBED","FRAME","HR","IMG","INPUT","KEYGEN","LINK","META","PARAM","SOURCE","TRACK","WBR","isVoidElement","node","options","treeAdapter","isElementNode","getNamespaceURI","NS","HTML","has","getTagName","defaultOpts","defaultTreeAdapter","scriptingEnabled","opts","assign","serializeChildNodes","serializeNode","parentNode","html","container","TEMPLATE","getTemplateContent","childNodes","getChildNodes","currentNode","serializeElement","isTextNode","serializeTextNode","isCommentNode","serializeCommentNode","isDocumentTypeNode","serializeDocumentTypeNode","tn","serializeAttributes","_ref","attr","getAttrList","namespace","name","XML","XMLNS","XLINK","prefix","escapeAttribute","content","getTextNodeContent","parent","getParentNode","parentTn","hasUnescapedText","escapeText","_ref2","getCommentNodeContent","_ref3","getDocumentTypeNodeName"],"sources":["C:/Users/vedic/node_modules/parse5/dist/cjs/serializer/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.serializeOuter = exports.serialize = void 0;\nconst html_js_1 = require(\"../common/html.js\");\nconst escape_js_1 = require(\"entities/lib/escape.js\");\nconst default_js_1 = require(\"../tree-adapters/default.js\");\n// Sets\nconst VOID_ELEMENTS = new Set([\n    html_js_1.TAG_NAMES.AREA,\n    html_js_1.TAG_NAMES.BASE,\n    html_js_1.TAG_NAMES.BASEFONT,\n    html_js_1.TAG_NAMES.BGSOUND,\n    html_js_1.TAG_NAMES.BR,\n    html_js_1.TAG_NAMES.COL,\n    html_js_1.TAG_NAMES.EMBED,\n    html_js_1.TAG_NAMES.FRAME,\n    html_js_1.TAG_NAMES.HR,\n    html_js_1.TAG_NAMES.IMG,\n    html_js_1.TAG_NAMES.INPUT,\n    html_js_1.TAG_NAMES.KEYGEN,\n    html_js_1.TAG_NAMES.LINK,\n    html_js_1.TAG_NAMES.META,\n    html_js_1.TAG_NAMES.PARAM,\n    html_js_1.TAG_NAMES.SOURCE,\n    html_js_1.TAG_NAMES.TRACK,\n    html_js_1.TAG_NAMES.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === html_js_1.NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: default_js_1.defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nfunction serialize(node, options) {\n    const opts = Object.assign(Object.assign({}, defaultOpts), options);\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\nexports.serialize = serialize;\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const html = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nfunction serializeOuter(node, options) {\n    const opts = Object.assign(Object.assign({}, defaultOpts), options);\n    return serializeNode(node, opts);\n}\nexports.serializeOuter = serializeOuter;\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === html_js_1.TAG_NAMES.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === html_js_1.NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (!attr.namespace) {\n            html += attr.name;\n        }\n        else\n            switch (attr.namespace) {\n                case html_js_1.NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case html_js_1.NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case html_js_1.NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        html += `=\"${(0, escape_js_1.escapeAttribute)(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === html_js_1.NS.HTML &&\n        (0, html_js_1.hasUnescapedText)(parentTn, options.scriptingEnabled)\n        ? content\n        : (0, escape_js_1.escapeText)(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}