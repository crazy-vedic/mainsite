{"ast":null,"code":"\"use strict\";\n\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decodeXML = exports.decodeHTMLStrict = exports.decodeHTMLAttribute = exports.decodeHTML = exports.determineBranch = exports.EntityDecoder = exports.DecodingMode = exports.BinTrieFlags = exports.fromCodePoint = exports.replaceCodePoint = exports.decodeCodePoint = exports.xmlDecodeTree = exports.htmlDecodeTree = void 0;\nvar decode_data_html_js_1 = __importDefault(require(\"./generated/decode-data-html.js\"));\nexports.htmlDecodeTree = decode_data_html_js_1.default;\nvar decode_data_xml_js_1 = __importDefault(require(\"./generated/decode-data-xml.js\"));\nexports.xmlDecodeTree = decode_data_xml_js_1.default;\nvar decode_codepoint_js_1 = __importStar(require(\"./decode_codepoint.js\"));\nexports.decodeCodePoint = decode_codepoint_js_1.default;\nvar decode_codepoint_js_2 = require(\"./decode_codepoint.js\");\nObject.defineProperty(exports, \"replaceCodePoint\", {\n  enumerable: true,\n  get: function () {\n    return decode_codepoint_js_2.replaceCodePoint;\n  }\n});\nObject.defineProperty(exports, \"fromCodePoint\", {\n  enumerable: true,\n  get: function () {\n    return decode_codepoint_js_2.fromCodePoint;\n  }\n});\nvar CharCodes;\n(function (CharCodes) {\n  CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n  CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n  CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n  CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n  CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n  CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n  CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n  CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n  CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n  CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n  CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n  CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nvar TO_LOWER_BIT = 32;\nvar BinTrieFlags;\n(function (BinTrieFlags) {\n  BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n  BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags = exports.BinTrieFlags || (exports.BinTrieFlags = {}));\nfunction isNumber(code) {\n  return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F;\n}\nfunction isAsciiAlphaNumeric(code) {\n  return code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z || code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z || isNumber(code);\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n  return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n  EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n  EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n  EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n  EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nvar DecodingMode;\n(function (DecodingMode) {\n  /** Entities in text nodes that can end with any character. */\n  DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n  /** Only allow entities terminated with a semicolon. */\n  DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n  /** Entities in attributes have limitations on ending characters. */\n  DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode = exports.DecodingMode || (exports.DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nvar EntityDecoder = /** @class */function () {\n  function EntityDecoder( /** The tree used to decode entities. */\n  decodeTree,\n  /**\n   * The function that is called when a codepoint is decoded.\n   *\n   * For multi-byte named entities, this will be called multiple times,\n   * with the second codepoint, and the same `consumed` value.\n   *\n   * @param codepoint The decoded codepoint.\n   * @param consumed The number of bytes consumed by the decoder.\n   */\n  emitCodePoint, /** An object that is used to produce errors. */\n  errors) {\n    this.decodeTree = decodeTree;\n    this.emitCodePoint = emitCodePoint;\n    this.errors = errors;\n    /** The current state of the decoder. */\n    this.state = EntityDecoderState.EntityStart;\n    /** Characters that were consumed while parsing an entity. */\n    this.consumed = 1;\n    /**\n     * The result of the entity.\n     *\n     * Either the result index of a numeric entity, or the codepoint of a\n     * numeric entity.\n     */\n    this.result = 0;\n    /** The current index in the decode tree. */\n    this.treeIndex = 0;\n    /** The number of characters that were consumed in excess. */\n    this.excess = 1;\n    /** The mode in which the decoder is operating. */\n    this.decodeMode = DecodingMode.Strict;\n  }\n  /** Resets the instance to make it reusable. */\n  EntityDecoder.prototype.startEntity = function (decodeMode) {\n    this.decodeMode = decodeMode;\n    this.state = EntityDecoderState.EntityStart;\n    this.result = 0;\n    this.treeIndex = 0;\n    this.excess = 1;\n    this.consumed = 1;\n  };\n  /**\n   * Write an entity to the decoder. This can be called multiple times with partial entities.\n   * If the entity is incomplete, the decoder will return -1.\n   *\n   * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n   * entity is incomplete, and resume when the next string is written.\n   *\n   * @param string The string containing the entity (or a continuation of the entity).\n   * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  EntityDecoder.prototype.write = function (str, offset) {\n    switch (this.state) {\n      case EntityDecoderState.EntityStart:\n        {\n          if (str.charCodeAt(offset) === CharCodes.NUM) {\n            this.state = EntityDecoderState.NumericStart;\n            this.consumed += 1;\n            return this.stateNumericStart(str, offset + 1);\n          }\n          this.state = EntityDecoderState.NamedEntity;\n          return this.stateNamedEntity(str, offset);\n        }\n      case EntityDecoderState.NumericStart:\n        {\n          return this.stateNumericStart(str, offset);\n        }\n      case EntityDecoderState.NumericDecimal:\n        {\n          return this.stateNumericDecimal(str, offset);\n        }\n      case EntityDecoderState.NumericHex:\n        {\n          return this.stateNumericHex(str, offset);\n        }\n      case EntityDecoderState.NamedEntity:\n        {\n          return this.stateNamedEntity(str, offset);\n        }\n    }\n  };\n  /**\n   * Switches between the numeric decimal and hexadecimal states.\n   *\n   * Equivalent to the `Numeric character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  EntityDecoder.prototype.stateNumericStart = function (str, offset) {\n    if (offset >= str.length) {\n      return -1;\n    }\n    if ((str.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n      this.state = EntityDecoderState.NumericHex;\n      this.consumed += 1;\n      return this.stateNumericHex(str, offset + 1);\n    }\n    this.state = EntityDecoderState.NumericDecimal;\n    return this.stateNumericDecimal(str, offset);\n  };\n  EntityDecoder.prototype.addToNumericResult = function (str, start, end, base) {\n    if (start !== end) {\n      var digitCount = end - start;\n      this.result = this.result * Math.pow(base, digitCount) + parseInt(str.substr(start, digitCount), base);\n      this.consumed += digitCount;\n    }\n  };\n  /**\n   * Parses a hexadecimal numeric entity.\n   *\n   * Equivalent to the `Hexademical character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  EntityDecoder.prototype.stateNumericHex = function (str, offset) {\n    var startIdx = offset;\n    while (offset < str.length) {\n      var char = str.charCodeAt(offset);\n      if (isNumber(char) || isHexadecimalCharacter(char)) {\n        offset += 1;\n      } else {\n        this.addToNumericResult(str, startIdx, offset, 16);\n        return this.emitNumericEntity(char, 3);\n      }\n    }\n    this.addToNumericResult(str, startIdx, offset, 16);\n    return -1;\n  };\n  /**\n   * Parses a decimal numeric entity.\n   *\n   * Equivalent to the `Decimal character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  EntityDecoder.prototype.stateNumericDecimal = function (str, offset) {\n    var startIdx = offset;\n    while (offset < str.length) {\n      var char = str.charCodeAt(offset);\n      if (isNumber(char)) {\n        offset += 1;\n      } else {\n        this.addToNumericResult(str, startIdx, offset, 10);\n        return this.emitNumericEntity(char, 2);\n      }\n    }\n    this.addToNumericResult(str, startIdx, offset, 10);\n    return -1;\n  };\n  /**\n   * Validate and emit a numeric entity.\n   *\n   * Implements the logic from the `Hexademical character reference start\n   * state` and `Numeric character reference end state` in the HTML spec.\n   *\n   * @param lastCp The last code point of the entity. Used to see if the\n   *               entity was terminated with a semicolon.\n   * @param expectedLength The minimum number of characters that should be\n   *                       consumed. Used to validate that at least one digit\n   *                       was consumed.\n   * @returns The number of characters that were consumed.\n   */\n  EntityDecoder.prototype.emitNumericEntity = function (lastCp, expectedLength) {\n    var _a;\n    // Ensure we consumed at least one digit.\n    if (this.consumed <= expectedLength) {\n      (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n      return 0;\n    }\n    // Figure out if this is a legit end of the entity\n    if (lastCp === CharCodes.SEMI) {\n      this.consumed += 1;\n    } else if (this.decodeMode === DecodingMode.Strict) {\n      return 0;\n    }\n    this.emitCodePoint((0, decode_codepoint_js_1.replaceCodePoint)(this.result), this.consumed);\n    if (this.errors) {\n      if (lastCp !== CharCodes.SEMI) {\n        this.errors.missingSemicolonAfterCharacterReference();\n      }\n      this.errors.validateNumericCharacterReference(this.result);\n    }\n    return this.consumed;\n  };\n  /**\n   * Parses a named entity.\n   *\n   * Equivalent to the `Named character reference state` in the HTML spec.\n   *\n   * @param str The string containing the entity (or a continuation of the entity).\n   * @param offset The current offset.\n   * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n   */\n  EntityDecoder.prototype.stateNamedEntity = function (str, offset) {\n    var decodeTree = this.decodeTree;\n    var current = decodeTree[this.treeIndex];\n    // The mask is the number of bytes of the value, including the current byte.\n    var valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n    for (; offset < str.length; offset++, this.excess++) {\n      var char = str.charCodeAt(offset);\n      this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n      if (this.treeIndex < 0) {\n        return this.result === 0 ||\n        // If we are parsing an attribute\n        this.decodeMode === DecodingMode.Attribute && (\n        // We shouldn't have consumed any characters after the entity,\n        valueLength === 0 ||\n        // And there should be no invalid characters.\n        isEntityInAttributeInvalidEnd(char)) ? 0 : this.emitNotTerminatedNamedEntity();\n      }\n      current = decodeTree[this.treeIndex];\n      valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n      // If the branch is a value, store it and continue\n      if (valueLength !== 0) {\n        // If the entity is terminated by a semicolon, we are done.\n        if (char === CharCodes.SEMI) {\n          return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n        }\n        // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n        if (this.decodeMode !== DecodingMode.Strict) {\n          this.result = this.treeIndex;\n          this.consumed += this.excess;\n          this.excess = 0;\n        }\n      }\n    }\n    return -1;\n  };\n  /**\n   * Emit a named entity that was not terminated with a semicolon.\n   *\n   * @returns The number of characters consumed.\n   */\n  EntityDecoder.prototype.emitNotTerminatedNamedEntity = function () {\n    var _a;\n    var _b = this,\n      result = _b.result,\n      decodeTree = _b.decodeTree;\n    var valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n    this.emitNamedEntityData(result, valueLength, this.consumed);\n    (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n    return this.consumed;\n  };\n  /**\n   * Emit a named entity.\n   *\n   * @param result The index of the entity in the decode tree.\n   * @param valueLength The number of bytes in the entity.\n   * @param consumed The number of characters consumed.\n   *\n   * @returns The number of characters consumed.\n   */\n  EntityDecoder.prototype.emitNamedEntityData = function (result, valueLength, consumed) {\n    var decodeTree = this.decodeTree;\n    this.emitCodePoint(valueLength === 1 ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH : decodeTree[result + 1], consumed);\n    if (valueLength === 3) {\n      // For multi-byte values, we need to emit the second byte.\n      this.emitCodePoint(decodeTree[result + 2], consumed);\n    }\n    return consumed;\n  };\n  /**\n   * Signal to the parser that the end of the input was reached.\n   *\n   * Remaining data will be emitted and relevant errors will be produced.\n   *\n   * @returns The number of characters consumed.\n   */\n  EntityDecoder.prototype.end = function () {\n    var _a;\n    switch (this.state) {\n      case EntityDecoderState.NamedEntity:\n        {\n          // Emit a named entity if we have one.\n          return this.result !== 0 && (this.decodeMode !== DecodingMode.Attribute || this.result === this.treeIndex) ? this.emitNotTerminatedNamedEntity() : 0;\n        }\n      // Otherwise, emit a numeric entity if we have one.\n      case EntityDecoderState.NumericDecimal:\n        {\n          return this.emitNumericEntity(0, 2);\n        }\n      case EntityDecoderState.NumericHex:\n        {\n          return this.emitNumericEntity(0, 3);\n        }\n      case EntityDecoderState.NumericStart:\n        {\n          (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n          return 0;\n        }\n      case EntityDecoderState.EntityStart:\n        {\n          // Return 0 if we have no entity.\n          return 0;\n        }\n    }\n  };\n  return EntityDecoder;\n}();\nexports.EntityDecoder = EntityDecoder;\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n  var ret = \"\";\n  var decoder = new EntityDecoder(decodeTree, function (str) {\n    return ret += (0, decode_codepoint_js_1.fromCodePoint)(str);\n  });\n  return function decodeWithTrie(str, decodeMode) {\n    var lastIndex = 0;\n    var offset = 0;\n    while ((offset = str.indexOf(\"&\", offset)) >= 0) {\n      ret += str.slice(lastIndex, offset);\n      decoder.startEntity(decodeMode);\n      var len = decoder.write(str,\n      // Skip the \"&\"\n      offset + 1);\n      if (len < 0) {\n        lastIndex = offset + decoder.end();\n        break;\n      }\n      lastIndex = offset + len;\n      // If `len` is 0, skip the current `&` and continue.\n      offset = len === 0 ? lastIndex + 1 : lastIndex;\n    }\n    var result = ret + str.slice(lastIndex);\n    // Make sure we don't keep a reference to the final string.\n    ret = \"\";\n    return result;\n  };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nfunction determineBranch(decodeTree, current, nodeIdx, char) {\n  var branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n  var jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n  // Case 1: Single branch encoded in jump offset\n  if (branchCount === 0) {\n    return jumpOffset !== 0 && char === jumpOffset ? nodeIdx : -1;\n  }\n  // Case 2: Multiple branches encoded in jump table\n  if (jumpOffset) {\n    var value = char - jumpOffset;\n    return value < 0 || value >= branchCount ? -1 : decodeTree[nodeIdx + value] - 1;\n  }\n  // Case 3: Multiple branches encoded in dictionary\n  // Binary search for the character.\n  var lo = nodeIdx;\n  var hi = lo + branchCount - 1;\n  while (lo <= hi) {\n    var mid = lo + hi >>> 1;\n    var midVal = decodeTree[mid];\n    if (midVal < char) {\n      lo = mid + 1;\n    } else if (midVal > char) {\n      hi = mid - 1;\n    } else {\n      return decodeTree[mid + branchCount];\n    }\n  }\n  return -1;\n}\nexports.determineBranch = determineBranch;\nvar htmlDecoder = getDecoder(decode_data_html_js_1.default);\nvar xmlDecoder = getDecoder(decode_data_xml_js_1.default);\n/**\n * Decodes an HTML string.\n *\n * @param str The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nfunction decodeHTML(str, mode) {\n  if (mode === void 0) {\n    mode = DecodingMode.Legacy;\n  }\n  return htmlDecoder(str, mode);\n}\nexports.decodeHTML = decodeHTML;\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLAttribute(str) {\n  return htmlDecoder(str, DecodingMode.Attribute);\n}\nexports.decodeHTMLAttribute = decodeHTMLAttribute;\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeHTMLStrict(str) {\n  return htmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeHTMLStrict = decodeHTMLStrict;\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param str The string to decode.\n * @returns The decoded string.\n */\nfunction decodeXML(str) {\n  return xmlDecoder(str, DecodingMode.Strict);\n}\nexports.decodeXML = decodeXML;","map":{"version":3,"names":["decode_data_html_js_1","__importDefault","require","exports","htmlDecodeTree","default","decode_data_xml_js_1","xmlDecodeTree","decode_codepoint_js_1","__importStar","decodeCodePoint","decode_codepoint_js_2","Object","defineProperty","enumerable","get","replaceCodePoint","fromCodePoint","CharCodes","TO_LOWER_BIT","BinTrieFlags","isNumber","code","ZERO","NINE","isHexadecimalCharacter","UPPER_A","UPPER_F","LOWER_A","LOWER_F","isAsciiAlphaNumeric","UPPER_Z","LOWER_Z","isEntityInAttributeInvalidEnd","EQUALS","EntityDecoderState","DecodingMode","EntityDecoder","decodeTree","emitCodePoint","errors","state","EntityStart","consumed","result","treeIndex","excess","decodeMode","Strict","prototype","startEntity","write","str","offset","charCodeAt","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","length","LOWER_X","addToNumericResult","start","end","base","digitCount","Math","pow","parseInt","substr","startIdx","char","emitNumericEntity","lastCp","expectedLength","_a","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","current","valueLength","VALUE_LENGTH","determineBranch","max","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","_b","getDecoder","ret","decoder","decodeWithTrie","lastIndex","indexOf","slice","len","nodeIdx","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","value","lo","hi","mid","midVal","htmlDecoder","xmlDecoder","decodeHTML","mode","Legacy","decodeHTMLAttribute","decodeHTMLStrict","decodeXML"],"sources":["https://raw.githubusercontent.com/fb55/entities/61afd4701eaa736978b13c7351cd3de9a96b04bc/src/decode.ts"],"sourcesContent":[null],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}