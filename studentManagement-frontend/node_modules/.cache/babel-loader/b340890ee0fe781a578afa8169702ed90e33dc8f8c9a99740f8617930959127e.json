{"ast":null,"code":"/*eslint no-var:0, prefer-arrow-callback: 0, object-shorthand: 0 */\n'use strict';\n\nvar Punycode = require('punycode');\nvar internals = {};\n\n//\n// Read rules from file.\n//\ninternals.rules = require('./data/rules.json').map(function (rule) {\n  return {\n    rule: rule,\n    suffix: rule.replace(/^(\\*\\.|\\!)/, ''),\n    punySuffix: -1,\n    wildcard: rule.charAt(0) === '*',\n    exception: rule.charAt(0) === '!'\n  };\n});\n\n//\n// Check is given string ends with `suffix`.\n//\ninternals.endsWith = function (str, suffix) {\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n};\n\n//\n// Find rule for a given domain.\n//\ninternals.findRule = function (domain) {\n  var punyDomain = Punycode.toASCII(domain);\n  return internals.rules.reduce(function (memo, rule) {\n    if (rule.punySuffix === -1) {\n      rule.punySuffix = Punycode.toASCII(rule.suffix);\n    }\n    if (!internals.endsWith(punyDomain, '.' + rule.punySuffix) && punyDomain !== rule.punySuffix) {\n      return memo;\n    }\n    // This has been commented out as it never seems to run. This is because\n    // sub tlds always appear after their parents and we never find a shorter\n    // match.\n    //if (memo) {\n    //  var memoSuffix = Punycode.toASCII(memo.suffix);\n    //  if (memoSuffix.length >= punySuffix.length) {\n    //    return memo;\n    //  }\n    //}\n    return rule;\n  }, null);\n};\n\n//\n// Error codes and messages.\n//\nexports.errorCodes = {\n  DOMAIN_TOO_SHORT: 'Domain name too short.',\n  DOMAIN_TOO_LONG: 'Domain name too long. It should be no more than 255 chars.',\n  LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',\n  LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',\n  LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',\n  LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',\n  LABEL_INVALID_CHARS: 'Domain name label can only contain alphanumeric characters or dashes.'\n};\n\n//\n// Validate domain name and throw if not valid.\n//\n// From wikipedia:\n//\n// Hostnames are composed of series of labels concatenated with dots, as are all\n// domain names. Each label must be between 1 and 63 characters long, and the\n// entire hostname (including the delimiting dots) has a maximum of 255 chars.\n//\n// Allowed chars:\n//\n// * `a-z`\n// * `0-9`\n// * `-` but not as a starting or ending character\n// * `.` as a separator for the textual portions of a domain name\n//\n// * http://en.wikipedia.org/wiki/Domain_name\n// * http://en.wikipedia.org/wiki/Hostname\n//\ninternals.validate = function (input) {\n  // Before we can validate we need to take care of IDNs with unicode chars.\n  var ascii = Punycode.toASCII(input);\n  if (ascii.length < 1) {\n    return 'DOMAIN_TOO_SHORT';\n  }\n  if (ascii.length > 255) {\n    return 'DOMAIN_TOO_LONG';\n  }\n\n  // Check each part's length and allowed chars.\n  var labels = ascii.split('.');\n  var label;\n  for (var i = 0; i < labels.length; ++i) {\n    label = labels[i];\n    if (!label.length) {\n      return 'LABEL_TOO_SHORT';\n    }\n    if (label.length > 63) {\n      return 'LABEL_TOO_LONG';\n    }\n    if (label.charAt(0) === '-') {\n      return 'LABEL_STARTS_WITH_DASH';\n    }\n    if (label.charAt(label.length - 1) === '-') {\n      return 'LABEL_ENDS_WITH_DASH';\n    }\n    if (!/^[a-z0-9\\-]+$/.test(label)) {\n      return 'LABEL_INVALID_CHARS';\n    }\n  }\n};\n\n//\n// Public API\n//\n\n//\n// Parse domain.\n//\nexports.parse = function (input) {\n  if (typeof input !== 'string') {\n    throw new TypeError('Domain name must be a string.');\n  }\n\n  // Force domain to lowercase.\n  var domain = input.slice(0).toLowerCase();\n\n  // Handle FQDN.\n  // TODO: Simply remove trailing dot?\n  if (domain.charAt(domain.length - 1) === '.') {\n    domain = domain.slice(0, domain.length - 1);\n  }\n\n  // Validate and sanitise input.\n  var error = internals.validate(domain);\n  if (error) {\n    return {\n      input: input,\n      error: {\n        message: exports.errorCodes[error],\n        code: error\n      }\n    };\n  }\n  var parsed = {\n    input: input,\n    tld: null,\n    sld: null,\n    domain: null,\n    subdomain: null,\n    listed: false\n  };\n  var domainParts = domain.split('.');\n\n  // Non-Internet TLD\n  if (domainParts[domainParts.length - 1] === 'local') {\n    return parsed;\n  }\n  var handlePunycode = function () {\n    if (!/xn--/.test(domain)) {\n      return parsed;\n    }\n    if (parsed.domain) {\n      parsed.domain = Punycode.toASCII(parsed.domain);\n    }\n    if (parsed.subdomain) {\n      parsed.subdomain = Punycode.toASCII(parsed.subdomain);\n    }\n    return parsed;\n  };\n  var rule = internals.findRule(domain);\n\n  // Unlisted tld.\n  if (!rule) {\n    if (domainParts.length < 2) {\n      return parsed;\n    }\n    parsed.tld = domainParts.pop();\n    parsed.sld = domainParts.pop();\n    parsed.domain = [parsed.sld, parsed.tld].join('.');\n    if (domainParts.length) {\n      parsed.subdomain = domainParts.pop();\n    }\n    return handlePunycode();\n  }\n\n  // At this point we know the public suffix is listed.\n  parsed.listed = true;\n  var tldParts = rule.suffix.split('.');\n  var privateParts = domainParts.slice(0, domainParts.length - tldParts.length);\n  if (rule.exception) {\n    privateParts.push(tldParts.shift());\n  }\n  parsed.tld = tldParts.join('.');\n  if (!privateParts.length) {\n    return handlePunycode();\n  }\n  if (rule.wildcard) {\n    tldParts.unshift(privateParts.pop());\n    parsed.tld = tldParts.join('.');\n  }\n  if (!privateParts.length) {\n    return handlePunycode();\n  }\n  parsed.sld = privateParts.pop();\n  parsed.domain = [parsed.sld, parsed.tld].join('.');\n  if (privateParts.length) {\n    parsed.subdomain = privateParts.join('.');\n  }\n  return handlePunycode();\n};\n\n//\n// Get domain.\n//\nexports.get = function (domain) {\n  if (!domain) {\n    return null;\n  }\n  return exports.parse(domain).domain || null;\n};\n\n//\n// Check whether domain belongs to a known public suffix.\n//\nexports.isValid = function (domain) {\n  var parsed = exports.parse(domain);\n  return Boolean(parsed.domain && parsed.listed);\n};","map":{"version":3,"names":["Punycode","require","internals","rules","map","rule","suffix","replace","punySuffix","wildcard","charAt","exception","endsWith","str","indexOf","length","findRule","domain","punyDomain","toASCII","reduce","memo","exports","errorCodes","DOMAIN_TOO_SHORT","DOMAIN_TOO_LONG","LABEL_STARTS_WITH_DASH","LABEL_ENDS_WITH_DASH","LABEL_TOO_LONG","LABEL_TOO_SHORT","LABEL_INVALID_CHARS","validate","input","ascii","labels","split","label","i","test","parse","TypeError","slice","toLowerCase","error","message","code","parsed","tld","sld","subdomain","listed","domainParts","handlePunycode","pop","join","tldParts","privateParts","push","shift","unshift","get","isValid","Boolean"],"sources":["C:/Users/vedic/node_modules/psl/index.js"],"sourcesContent":["/*eslint no-var:0, prefer-arrow-callback: 0, object-shorthand: 0 */\n'use strict';\n\n\nvar Punycode = require('punycode');\n\n\nvar internals = {};\n\n\n//\n// Read rules from file.\n//\ninternals.rules = require('./data/rules.json').map(function (rule) {\n\n  return {\n    rule: rule,\n    suffix: rule.replace(/^(\\*\\.|\\!)/, ''),\n    punySuffix: -1,\n    wildcard: rule.charAt(0) === '*',\n    exception: rule.charAt(0) === '!'\n  };\n});\n\n\n//\n// Check is given string ends with `suffix`.\n//\ninternals.endsWith = function (str, suffix) {\n\n  return str.indexOf(suffix, str.length - suffix.length) !== -1;\n};\n\n\n//\n// Find rule for a given domain.\n//\ninternals.findRule = function (domain) {\n\n  var punyDomain = Punycode.toASCII(domain);\n  return internals.rules.reduce(function (memo, rule) {\n\n    if (rule.punySuffix === -1){\n      rule.punySuffix = Punycode.toASCII(rule.suffix);\n    }\n    if (!internals.endsWith(punyDomain, '.' + rule.punySuffix) && punyDomain !== rule.punySuffix) {\n      return memo;\n    }\n    // This has been commented out as it never seems to run. This is because\n    // sub tlds always appear after their parents and we never find a shorter\n    // match.\n    //if (memo) {\n    //  var memoSuffix = Punycode.toASCII(memo.suffix);\n    //  if (memoSuffix.length >= punySuffix.length) {\n    //    return memo;\n    //  }\n    //}\n    return rule;\n  }, null);\n};\n\n\n//\n// Error codes and messages.\n//\nexports.errorCodes = {\n  DOMAIN_TOO_SHORT: 'Domain name too short.',\n  DOMAIN_TOO_LONG: 'Domain name too long. It should be no more than 255 chars.',\n  LABEL_STARTS_WITH_DASH: 'Domain name label can not start with a dash.',\n  LABEL_ENDS_WITH_DASH: 'Domain name label can not end with a dash.',\n  LABEL_TOO_LONG: 'Domain name label should be at most 63 chars long.',\n  LABEL_TOO_SHORT: 'Domain name label should be at least 1 character long.',\n  LABEL_INVALID_CHARS: 'Domain name label can only contain alphanumeric characters or dashes.'\n};\n\n\n//\n// Validate domain name and throw if not valid.\n//\n// From wikipedia:\n//\n// Hostnames are composed of series of labels concatenated with dots, as are all\n// domain names. Each label must be between 1 and 63 characters long, and the\n// entire hostname (including the delimiting dots) has a maximum of 255 chars.\n//\n// Allowed chars:\n//\n// * `a-z`\n// * `0-9`\n// * `-` but not as a starting or ending character\n// * `.` as a separator for the textual portions of a domain name\n//\n// * http://en.wikipedia.org/wiki/Domain_name\n// * http://en.wikipedia.org/wiki/Hostname\n//\ninternals.validate = function (input) {\n\n  // Before we can validate we need to take care of IDNs with unicode chars.\n  var ascii = Punycode.toASCII(input);\n\n  if (ascii.length < 1) {\n    return 'DOMAIN_TOO_SHORT';\n  }\n  if (ascii.length > 255) {\n    return 'DOMAIN_TOO_LONG';\n  }\n\n  // Check each part's length and allowed chars.\n  var labels = ascii.split('.');\n  var label;\n\n  for (var i = 0; i < labels.length; ++i) {\n    label = labels[i];\n    if (!label.length) {\n      return 'LABEL_TOO_SHORT';\n    }\n    if (label.length > 63) {\n      return 'LABEL_TOO_LONG';\n    }\n    if (label.charAt(0) === '-') {\n      return 'LABEL_STARTS_WITH_DASH';\n    }\n    if (label.charAt(label.length - 1) === '-') {\n      return 'LABEL_ENDS_WITH_DASH';\n    }\n    if (!/^[a-z0-9\\-]+$/.test(label)) {\n      return 'LABEL_INVALID_CHARS';\n    }\n  }\n};\n\n\n//\n// Public API\n//\n\n\n//\n// Parse domain.\n//\nexports.parse = function (input) {\n\n  if (typeof input !== 'string') {\n    throw new TypeError('Domain name must be a string.');\n  }\n\n  // Force domain to lowercase.\n  var domain = input.slice(0).toLowerCase();\n\n  // Handle FQDN.\n  // TODO: Simply remove trailing dot?\n  if (domain.charAt(domain.length - 1) === '.') {\n    domain = domain.slice(0, domain.length - 1);\n  }\n\n  // Validate and sanitise input.\n  var error = internals.validate(domain);\n  if (error) {\n    return {\n      input: input,\n      error: {\n        message: exports.errorCodes[error],\n        code: error\n      }\n    };\n  }\n\n  var parsed = {\n    input: input,\n    tld: null,\n    sld: null,\n    domain: null,\n    subdomain: null,\n    listed: false\n  };\n\n  var domainParts = domain.split('.');\n\n  // Non-Internet TLD\n  if (domainParts[domainParts.length - 1] === 'local') {\n    return parsed;\n  }\n\n  var handlePunycode = function () {\n\n    if (!/xn--/.test(domain)) {\n      return parsed;\n    }\n    if (parsed.domain) {\n      parsed.domain = Punycode.toASCII(parsed.domain);\n    }\n    if (parsed.subdomain) {\n      parsed.subdomain = Punycode.toASCII(parsed.subdomain);\n    }\n    return parsed;\n  };\n\n  var rule = internals.findRule(domain);\n\n  // Unlisted tld.\n  if (!rule) {\n    if (domainParts.length < 2) {\n      return parsed;\n    }\n    parsed.tld = domainParts.pop();\n    parsed.sld = domainParts.pop();\n    parsed.domain = [parsed.sld, parsed.tld].join('.');\n    if (domainParts.length) {\n      parsed.subdomain = domainParts.pop();\n    }\n    return handlePunycode();\n  }\n\n  // At this point we know the public suffix is listed.\n  parsed.listed = true;\n\n  var tldParts = rule.suffix.split('.');\n  var privateParts = domainParts.slice(0, domainParts.length - tldParts.length);\n\n  if (rule.exception) {\n    privateParts.push(tldParts.shift());\n  }\n\n  parsed.tld = tldParts.join('.');\n\n  if (!privateParts.length) {\n    return handlePunycode();\n  }\n\n  if (rule.wildcard) {\n    tldParts.unshift(privateParts.pop());\n    parsed.tld = tldParts.join('.');\n  }\n\n  if (!privateParts.length) {\n    return handlePunycode();\n  }\n\n  parsed.sld = privateParts.pop();\n  parsed.domain = [parsed.sld,  parsed.tld].join('.');\n\n  if (privateParts.length) {\n    parsed.subdomain = privateParts.join('.');\n  }\n\n  return handlePunycode();\n};\n\n\n//\n// Get domain.\n//\nexports.get = function (domain) {\n\n  if (!domain) {\n    return null;\n  }\n  return exports.parse(domain).domain || null;\n};\n\n\n//\n// Check whether domain belongs to a known public suffix.\n//\nexports.isValid = function (domain) {\n\n  var parsed = exports.parse(domain);\n  return Boolean(parsed.domain && parsed.listed);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}