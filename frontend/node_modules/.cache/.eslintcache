[{"C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\index.js":"1","C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\studentManagement\\Login.js":"2","C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\studentManagement\\404.js":"3","C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\studentManagement\\Dashboard.js":"4","C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\home\\portfolio.jsx":"5","C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\Resume.js":"6"},{"size":1176,"mtime":1698388979237,"results":"7","hashOfConfig":"8"},{"size":2275,"mtime":1693076406115,"results":"9","hashOfConfig":"8"},{"size":290,"mtime":1690948516151,"results":"10","hashOfConfig":"8"},{"size":12621,"mtime":1695736787313,"results":"11","hashOfConfig":"8"},{"size":8546,"mtime":1695748890063,"results":"12","hashOfConfig":"8"},{"size":280,"mtime":1698389709538,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1v9ibe7",{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","suppressedMessages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","suppressedMessages":"29","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":null},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\index.js",[],[],"C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\studentManagement\\Login.js",[],[],"C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\studentManagement\\404.js",[],[],"C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\studentManagement\\Dashboard.js",["33"],[],"import { useCallback, useEffect, useState ,useRef } from 'react';\r\nimport './Dashboard.css';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport React from 'react';\r\nimport 'react-toastify/dist/ReactToastify.css';\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nfunction Dashboard() {\r\n  const BACKENDSERVER = \"https://vedicvarma.com\";\r\n  const toasty =  {position: \"top-right\",autoClose: 5000,hideProgressBar: false,closeOnClick: true,draggable: true,progress: undefined,theme: \"colored\",}\r\n  const tokenRef = useRef(localStorage.getItem('token'));\r\n  const [students, setStudents] = useState([]);\r\n  const [addStudent, setAddStudent] = useState({show:false,name:null, _id: NaN, joining: null, gpa: null, section: null,program:null});\r\n  const [updateStudents, setUpdateStudents] = useState([]);\r\n  function clearAddData() {\r\n    setAddStudent(prevState => ({...prevState,show:false,name:null, joining: null, gpa: null, section: null,program:null}))\r\n    document.querySelectorAll(\"input.add-student\").forEach((input) => input.value = \"\")\r\n  }\r\n  const fetchStudents = useCallback(()=> {\r\n    console.log(\"fetching students\")\r\n    var response\r\n    fetch(`${BACKENDSERVER}/api/students/search`, {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json',\r\n    'Authorization':`${tokenRef.current}`},\r\n    body: JSON.stringify({sort: {_id: -1},limit:10})\r\n    })\r\n      .then(res => {response=res;return res.json();})\r\n      .then(data => setStudents(prevState => {return data.map((student) => {\r\n        if (prevState===undefined) {\r\n          return {...student,checked:false,settings:false}\r\n        }\r\n        var prevStudent = (prevState.find((prevStudent) => prevStudent._id === student._id))||({checked:false,settings:false});\r\n        var tempstudent = {...student};\r\n        tempstudent.checked=prevStudent.checked||false;\r\n        tempstudent.settings=prevStudent.settings||false;\r\n        return tempstudent;})}))\r\n      .catch(err => {\r\n        if (response.status===403) {\r\n          toast.error(`Unauthorized :\\n${<Link to=\"'/projects/studentManagement'\">Please login again from the login page.</Link>}`,toasty);\r\n        }else{\r\n        toast.error(`${response.status} : ${err}`,toasty);\r\n        console.log(err);}});\r\n  },[])\r\n  useEffect(() => {\r\n    const fetchAndUpdateStudents = () => {\r\n      fetchStudents();\r\n      // getLastId();\r\n    };\r\n  \r\n    fetchAndUpdateStudents(); // Call it initially\r\n  \r\n    const timer = setInterval(fetchAndUpdateStudents, 10000);\r\n  \r\n    return () => {\r\n      clearInterval(timer);\r\n    };\r\n  }, [fetchStudents]);\r\n    function handleAddStudent(event) {\r\n    const {id,value} = event.target\r\n    setAddStudent(prevState=>({...prevState,[id]:value}))\r\n  }\r\n  function getLastId() {\r\n    fetch(`${BACKENDSERVER}/api/students/search`, {method: 'POST', headers: { 'Content-Type': 'application/json',\r\n    'Authorization':`${tokenRef.current}` },body: JSON.stringify({sort: {_id: -1},limit:1})})\r\n  .then(res => res.json())\r\n  .then(info => {\r\n    setAddStudent(prevState=>({...prevState,_id:info[0]._id+1}))\r\n    console.log(\"get last id\");\r\n    return })\r\n  }\r\n  function handleUpdateStudent(event,SID) {\r\n    const {value} = event.target\r\n    const target = event.target.getAttribute(\"target\")\r\n    setUpdateStudents(prevState=>{return prevState.map((student) => {\r\n      if (student._id===SID) {\r\n        return {...student,[target]:value}\r\n      }\r\n      return student;\r\n    })})\r\n    console.log(updateStudents)\r\n  }\r\n  function fetchUpdateStudents(SID) {\r\n    var response;\r\n    fetch(`${BACKENDSERVER}/api/students/${SID}`, {method: 'PUT', headers: { 'Content-Type': 'application/json',\r\n    'Authorization':`${tokenRef.current}` },body: JSON.stringify(Array.from(updateStudents.filter((student) => student._id===SID))[0])})\r\n  .then(res => {response=res;return res.json();})\r\n  .then(info => {if (response.status===200) {\r\n    toast.success(info.message,toasty)\r\n    document.getElementById('updateCancel').click();\r\n    fetchStudents();}\r\n    else {\r\n      toast.error(info.message,toasty)\r\n    }\r\n  })}\r\n  function addStudentToDB(event) {\r\n    event.preventDefault();\r\n    var response;\r\n    fetch(`${BACKENDSERVER}/api/students/create`, {method: 'POST', headers: { 'Content-Type': 'application/json',\r\n    'Authorization':`${tokenRef.current}` }, body: JSON.stringify(addStudent)})\r\n    .then(res=>{\r\n      response = res;\r\n      return res.json();})\r\n    .then(body => {\r\n      if (response.status === 200) {\r\n        toast.success(body.message,toasty)\r\n        clearAddData();\r\n      } else {\r\n        toast.error(body.message,toasty)\r\n  }\r\n    fetchStudents();}).catch(err => console.log(err))\r\n\r\n};\r\nvar index;\r\n  return (\r\n    <div id=\"dashboard-root\">\r\n      {/*<button onClick={() => toast.warn(\"etouhetotusehiesu\",toasty)}>toasty pls</button>*/}\r\n      <ToastContainer />\r\n      <h1>Student Dashboard</h1>\r\n      <button id=\"add-student-btn\" onClick={() => {if (!addStudent.show) {getLastId();};setAddStudent(prevState=>({...prevState,'show':!addStudent.show}));}}>{addStudent.show?\"Close Menu\":\"Add Student\"}</button>\r\n      <button id=\"delete-students\" onClick={() => {\r\n        const checkedStudents = students.filter((student) => student.checked)\r\n        var response;\r\n        fetch(`${BACKENDSERVER}/api/students`, {method: 'DELETE', headers: { 'Content-Type': 'application/json',\r\n    'Authorization':`${tokenRef.current}` }, body: JSON.stringify(checkedStudents.map((student) => student._id))})\r\n        .then(res => {response = res;\r\n          return res.json();})\r\n        .then(data => {\r\n          if (response.status===200) {\r\n          return toast.success(data.message,toasty);}\r\n          else{toast.warning(data.message,toasty);}})\r\n        .catch(err => console.log(err))\r\n        fetchStudents();\r\n      }}>Delete Checked Students</button>\r\n      {addStudent.show ? (\r\n      <div id=\"add-student-div\">\r\n      <table id='add-student-table'>\r\n        <thead>\r\n        <tr>\r\n          <td className='w3'>\r\n            <div id=\"addRemoveStudents-div\">\r\n              <button\r\n                id=\"addStudentToDB\"\r\n                className=\"editStudent\"\r\n                onClick={(event) => {addStudentToDB(event);document.getElementById(\"removeAddStudent\").click();}}>\r\n                <img src={require(\"../../components/check.png\")} alt=\"check add student\" />\r\n              </button>\r\n              <button id=\"removeAddStudent\" className=\"editStudent\" onClick={() => clearAddData()}>\r\n                <img src={require(\"../../components/cancel.png\")} alt=\"cancel add student\" />\r\n              </button>\r\n            </div>\r\n          </td>\r\n          <td className=\"w4\">\r\n            <input\r\n              className=\"add-student\"\r\n              id=\"_id\"\r\n              placeholder=\"regNo\"\r\n              onChange={(event) => handleAddStudent(event)}\r\n              value={String(addStudent._id)}\r\n            ></input>\r\n          </td>\r\n          <td className=\"w13_5\">\r\n            <input\r\n              className=\"add-student\"\r\n              id=\"name\"\r\n              placeholder=\"name\"\r\n              onChange={(event) => handleAddStudent(event)}\r\n            ></input>\r\n          </td>\r\n          <td className=\"w8\">\r\n            <input\r\n              className=\"add-student\"\r\n              id=\"joining\"\r\n              placeholder=\"Joining\"\r\n              onChange={(event) => handleAddStudent(event)}\r\n            ></input>\r\n          </td>\r\n          <td className=\"w7\">\r\n            <input\r\n              className=\"add-student\"\r\n              id=\"program\"\r\n              placeholder=\"Program\"\r\n              onChange={(event) => handleAddStudent(event)}\r\n            ></input>\r\n          </td>\r\n          <td className=\"w3\">\r\n            <input\r\n              className=\"add-student\"\r\n              id=\"gpa\"\r\n              placeholder=\"gpa\"\r\n              onChange={(event) => handleAddStudent(event)}\r\n            ></input>\r\n          </td>\r\n          <td className=\"w6\">\r\n            <input\r\n              className=\"add-student\"\r\n              id=\"section\"\r\n              placeholder=\"section\"\r\n              onChange={(event) => handleAddStudent(event)}\r\n            ></input>\r\n          </td>\r\n          <td className='w3'></td>\r\n        </tr>\r\n        </thead>\r\n      </table>\r\n      </div>\r\n      )\r\n      ://////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n      <div id=\"add-student\"></div>}\r\n      <table id='main-table'>\r\n      <thead>\r\n        <tr>\r\n          <td className=\"w3\">Delete</td>\r\n          <td className=\"w4\">Reg No.</td>\r\n          <td className=\"w13_5\">Name</td>\r\n          <td className=\"w8\">Joining</td>\r\n          <td className=\"w7\">Program</td>\r\n          <td className=\"w3\">gpa</td>\r\n          <td className=\"w3\">Section</td>\r\n          <td className=\"w3\">Edit</td>\r\n        </tr>\r\n      </thead>\r\n        <tbody>\r\n          {students.map((student) => (student.settings?\r\n            <tr key = {student._id}>\r\n            <td>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={Boolean(student.checked)}\r\n                onChange={(event) => {\r\n                  const updatedStudents = students.map((s) =>\r\n                    s._id === student._id ? { ...s, checked: event.target.checked } : s\r\n                  );\r\n                  console.log(updatedStudents);\r\n                  setStudents(updatedStudents);\r\n                }}\r\n              />\r\n            </td>\r\n            <td>{student._id}</td>{/*      const { _id,name, joining, program, gpa, section} = req.body;*/}\r\n           <td><input type=\"text\" onChange={(event) => handleUpdateStudent(event,student._id)} target='name' placeholder={student.name}/></td>\r\n            <td><input type=\"text\" onChange={(event) => handleUpdateStudent(event,student._id)} target='joining' placeholder={student.joining}/></td>\r\n            <td><input type=\"text\" onChange={(event) => handleUpdateStudent(event,student._id)} target='program' placeholder={student.program}/></td>\r\n            <td><input type=\"text\" onChange={(event) => handleUpdateStudent(event,student._id)} target='gpa' placeholder={student.gpa[\"$numberDecimal\"]}/></td>\r\n            <td><input type=\"text\" onChange={(event) => handleUpdateStudent(event,student._id)} target='section' placeholder={student.section}/></td>\r\n            <td><div id='updateDiv'>\r\n              <button onClick={() => {\r\n                setUpdateStudents(prevState => prevState.filter((s) => s._id !== student._id))\r\n                setStudents(students.map((s) =>\r\n                s._id === student._id ? { ...s, settings: false } : s\r\n                ));\r\n              }} id='updateCancel'><img src={require(\"../../components/cancel.png\")} alt='reject update'></img></button>\r\n              <button onClick={() => fetchUpdateStudents(student._id)}><img src={require(\"../../components/check.png\")} alt='accept update'></img></button>\r\n            </div></td>\r\n            </tr>\r\n          :////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////\r\n            <tr key = {student._id}>\r\n            <td>\r\n              <input\r\n                type=\"checkbox\"\r\n                checked={Boolean(student.checked)}\r\n                onChange={(event) => {\r\n                  const updatedStudents = students.map((s) =>\r\n                    s._id === student._id ? { ...s, checked: event.target.checked } : s\r\n                  );\r\n                  setStudents(updatedStudents);\r\n                }}\r\n              />\r\n            </td>\r\n              <td>{student._id}</td>\r\n              <td>{student.name}</td>\r\n              <td>{student.joining}</td>\r\n              <td>{student.program}</td>\r\n              <td>{student.gpa[\"$numberDecimal\"]}</td>\r\n              <td>{student.section}</td>\r\n              <td><button className=\"editStudent\" onClick={(event) => {\r\n              setUpdateStudents(prevState => [...prevState,student])\r\n              var tempStudents = [...students]\r\n              index=students.findIndex((studentF) => studentF._id===student._id)\r\n              tempStudents[index].settings=tempStudents[index].settings?false:true\r\n              setStudents(tempStudents)\r\n            }}><img src={require(\"../../components//settings.png\")} alt=\"edit row\" /></button></td></tr>          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  )}\r\nexport default Dashboard","C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\home\\portfolio.jsx",["34","35","36","37","38","39"],[],"C:\\Users\\vedic\\OneDrive\\Desktop\\webDev\\mainsite\\frontend\\src\\pages\\Resume.js",[],[],{"ruleId":"40","severity":1,"message":"41","line":45,"column":5,"nodeType":"42","endLine":45,"endColumn":7,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":42,"column":19,"nodeType":"46","messageId":"47","endLine":46,"endColumn":20,"fix":"48"},{"ruleId":"44","severity":1,"message":"45","line":56,"column":19,"nodeType":"46","messageId":"47","endLine":60,"endColumn":20,"fix":"49"},{"ruleId":"44","severity":1,"message":"45","line":70,"column":19,"nodeType":"46","messageId":"47","endLine":74,"endColumn":20,"fix":"50"},{"ruleId":"44","severity":1,"message":"45","line":157,"column":15,"nodeType":"46","messageId":"47","endLine":157,"endColumn":122,"fix":"51"},{"ruleId":"44","severity":1,"message":"45","line":161,"column":15,"nodeType":"46","messageId":"47","endLine":161,"endColumn":115,"fix":"52"},{"ruleId":"44","severity":1,"message":"45","line":165,"column":15,"nodeType":"46","messageId":"47","endLine":165,"endColumn":116,"fix":"53"},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'toasty'. Either include it or remove the dependency array.","ArrayExpression",["54"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" (which implies rel=\"noopener\") is a security risk in older browsers: see https://mathiasbynens.github.io/rel-noopener/#recommendations","JSXOpeningElement","noTargetBlankWithoutNoreferrer",{"range":"55","text":"56"},{"range":"57","text":"56"},{"range":"58","text":"56"},{"range":"59","text":"56"},{"range":"60","text":"56"},{"range":"61","text":"56"},{"desc":"62","fix":"63"},[1322,1322]," rel=\"noreferrer\"",[1831,1831],[2350,2350],[7178,7178],[7389,7389],[7592,7592],"Update the dependencies array to be: [toasty]",{"range":"64","text":"65"},[2270,2272],"[toasty]"]