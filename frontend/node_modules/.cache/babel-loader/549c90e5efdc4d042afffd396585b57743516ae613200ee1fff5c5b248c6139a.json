{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.adapter = exports.serializeDoctypeContent = void 0;\nconst parse5_1 = require(\"parse5\");\nconst domhandler_1 = require(\"domhandler\");\nfunction createTextNode(value) {\n  return new domhandler_1.Text(value);\n}\nfunction enquoteDoctypeId(id) {\n  const quote = id.includes('\"') ? \"'\" : '\"';\n  return quote + id + quote;\n}\n/** @internal */\nfunction serializeDoctypeContent(name, publicId, systemId) {\n  let str = '!DOCTYPE ';\n  if (name) {\n    str += name;\n  }\n  if (publicId) {\n    str += ` PUBLIC ${enquoteDoctypeId(publicId)}`;\n  } else if (systemId) {\n    str += ' SYSTEM';\n  }\n  if (systemId) {\n    str += ` ${enquoteDoctypeId(systemId)}`;\n  }\n  return str;\n}\nexports.serializeDoctypeContent = serializeDoctypeContent;\nexports.adapter = {\n  // Re-exports from domhandler\n  isCommentNode: domhandler_1.isComment,\n  isElementNode: domhandler_1.isTag,\n  isTextNode: domhandler_1.isText,\n  //Node construction\n  createDocument() {\n    const node = new domhandler_1.Document([]);\n    node['x-mode'] = parse5_1.html.DOCUMENT_MODE.NO_QUIRKS;\n    return node;\n  },\n  createDocumentFragment() {\n    return new domhandler_1.Document([]);\n  },\n  createElement(tagName, namespaceURI, attrs) {\n    const attribs = Object.create(null);\n    const attribsNamespace = Object.create(null);\n    const attribsPrefix = Object.create(null);\n    for (let i = 0; i < attrs.length; i++) {\n      const attrName = attrs[i].name;\n      attribs[attrName] = attrs[i].value;\n      attribsNamespace[attrName] = attrs[i].namespace;\n      attribsPrefix[attrName] = attrs[i].prefix;\n    }\n    const node = new domhandler_1.Element(tagName, attribs, []);\n    node.namespace = namespaceURI;\n    node['x-attribsNamespace'] = attribsNamespace;\n    node['x-attribsPrefix'] = attribsPrefix;\n    return node;\n  },\n  createCommentNode(data) {\n    return new domhandler_1.Comment(data);\n  },\n  //Tree mutation\n  appendChild(parentNode, newNode) {\n    const prev = parentNode.children[parentNode.children.length - 1];\n    if (prev) {\n      prev.next = newNode;\n      newNode.prev = prev;\n    }\n    parentNode.children.push(newNode);\n    newNode.parent = parentNode;\n  },\n  insertBefore(parentNode, newNode, referenceNode) {\n    const insertionIdx = parentNode.children.indexOf(referenceNode);\n    const {\n      prev\n    } = referenceNode;\n    if (prev) {\n      prev.next = newNode;\n      newNode.prev = prev;\n    }\n    referenceNode.prev = newNode;\n    newNode.next = referenceNode;\n    parentNode.children.splice(insertionIdx, 0, newNode);\n    newNode.parent = parentNode;\n  },\n  setTemplateContent(templateElement, contentElement) {\n    exports.adapter.appendChild(templateElement, contentElement);\n  },\n  getTemplateContent(templateElement) {\n    return templateElement.children[0];\n  },\n  setDocumentType(document, name, publicId, systemId) {\n    const data = serializeDoctypeContent(name, publicId, systemId);\n    let doctypeNode = document.children.find(node => (0, domhandler_1.isDirective)(node) && node.name === '!doctype');\n    if (doctypeNode) {\n      doctypeNode.data = data !== null && data !== void 0 ? data : null;\n    } else {\n      doctypeNode = new domhandler_1.ProcessingInstruction('!doctype', data);\n      exports.adapter.appendChild(document, doctypeNode);\n    }\n    doctypeNode['x-name'] = name !== null && name !== void 0 ? name : undefined;\n    doctypeNode['x-publicId'] = publicId !== null && publicId !== void 0 ? publicId : undefined;\n    doctypeNode['x-systemId'] = systemId !== null && systemId !== void 0 ? systemId : undefined;\n  },\n  setDocumentMode(document, mode) {\n    document['x-mode'] = mode;\n  },\n  getDocumentMode(document) {\n    return document['x-mode'];\n  },\n  detachNode(node) {\n    if (node.parent) {\n      const idx = node.parent.children.indexOf(node);\n      const {\n        prev,\n        next\n      } = node;\n      node.prev = null;\n      node.next = null;\n      if (prev) {\n        prev.next = next;\n      }\n      if (next) {\n        next.prev = prev;\n      }\n      node.parent.children.splice(idx, 1);\n      node.parent = null;\n    }\n  },\n  insertText(parentNode, text) {\n    const lastChild = parentNode.children[parentNode.children.length - 1];\n    if (lastChild && (0, domhandler_1.isText)(lastChild)) {\n      lastChild.data += text;\n    } else {\n      exports.adapter.appendChild(parentNode, createTextNode(text));\n    }\n  },\n  insertTextBefore(parentNode, text, referenceNode) {\n    const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];\n    if (prevNode && (0, domhandler_1.isText)(prevNode)) {\n      prevNode.data += text;\n    } else {\n      exports.adapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n    }\n  },\n  adoptAttributes(recipient, attrs) {\n    for (let i = 0; i < attrs.length; i++) {\n      const attrName = attrs[i].name;\n      if (typeof recipient.attribs[attrName] === 'undefined') {\n        recipient.attribs[attrName] = attrs[i].value;\n        recipient['x-attribsNamespace'][attrName] = attrs[i].namespace;\n        recipient['x-attribsPrefix'][attrName] = attrs[i].prefix;\n      }\n    }\n  },\n  //Tree traversing\n  getFirstChild(node) {\n    return node.children[0];\n  },\n  getChildNodes(node) {\n    return node.children;\n  },\n  getParentNode(node) {\n    return node.parent;\n  },\n  getAttrList(element) {\n    return element.attributes;\n  },\n  //Node data\n  getTagName(element) {\n    return element.name;\n  },\n  getNamespaceURI(element) {\n    return element.namespace;\n  },\n  getTextNodeContent(textNode) {\n    return textNode.data;\n  },\n  getCommentNodeContent(commentNode) {\n    return commentNode.data;\n  },\n  getDocumentTypeNodeName(doctypeNode) {\n    var _a;\n    return (_a = doctypeNode['x-name']) !== null && _a !== void 0 ? _a : '';\n  },\n  getDocumentTypeNodePublicId(doctypeNode) {\n    var _a;\n    return (_a = doctypeNode['x-publicId']) !== null && _a !== void 0 ? _a : '';\n  },\n  getDocumentTypeNodeSystemId(doctypeNode) {\n    var _a;\n    return (_a = doctypeNode['x-systemId']) !== null && _a !== void 0 ? _a : '';\n  },\n  //Node types\n  isDocumentTypeNode(node) {\n    return (0, domhandler_1.isDirective)(node) && node.name === '!doctype';\n  },\n  // Source code location\n  setNodeSourceCodeLocation(node, location) {\n    if (location) {\n      node.startIndex = location.startOffset;\n      node.endIndex = location.endOffset;\n    }\n    node.sourceCodeLocation = location;\n  },\n  getNodeSourceCodeLocation(node) {\n    return node.sourceCodeLocation;\n  },\n  updateNodeSourceCodeLocation(node, endLocation) {\n    if (endLocation.endOffset != null) node.endIndex = endLocation.endOffset;\n    node.sourceCodeLocation = Object.assign(Object.assign({}, node.sourceCodeLocation), endLocation);\n  }\n};","map":{"version":3,"names":["Object","defineProperty","exports","value","adapter","serializeDoctypeContent","parse5_1","require","domhandler_1","createTextNode","Text","enquoteDoctypeId","id","quote","includes","name","publicId","systemId","str","isCommentNode","isComment","isElementNode","isTag","isTextNode","isText","createDocument","node","Document","html","DOCUMENT_MODE","NO_QUIRKS","createDocumentFragment","createElement","tagName","namespaceURI","attrs","attribs","create","attribsNamespace","attribsPrefix","i","length","attrName","namespace","prefix","Element","createCommentNode","data","Comment","appendChild","parentNode","newNode","prev","children","next","push","parent","insertBefore","referenceNode","insertionIdx","indexOf","splice","setTemplateContent","templateElement","contentElement","getTemplateContent","setDocumentType","document","doctypeNode","find","isDirective","ProcessingInstruction","undefined","setDocumentMode","mode","getDocumentMode","detachNode","idx","insertText","text","lastChild","insertTextBefore","prevNode","adoptAttributes","recipient","getFirstChild","getChildNodes","getParentNode","getAttrList","element","attributes","getTagName","getNamespaceURI","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","_a","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isDocumentTypeNode","setNodeSourceCodeLocation","location","startIndex","startOffset","endIndex","endOffset","sourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation","assign"],"sources":["C:/Users/vedic/node_modules/parse5-htmlparser2-tree-adapter/dist/cjs/index.js"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.adapter = exports.serializeDoctypeContent = void 0;\nconst parse5_1 = require(\"parse5\");\nconst domhandler_1 = require(\"domhandler\");\nfunction createTextNode(value) {\n    return new domhandler_1.Text(value);\n}\nfunction enquoteDoctypeId(id) {\n    const quote = id.includes('\"') ? \"'\" : '\"';\n    return quote + id + quote;\n}\n/** @internal */\nfunction serializeDoctypeContent(name, publicId, systemId) {\n    let str = '!DOCTYPE ';\n    if (name) {\n        str += name;\n    }\n    if (publicId) {\n        str += ` PUBLIC ${enquoteDoctypeId(publicId)}`;\n    }\n    else if (systemId) {\n        str += ' SYSTEM';\n    }\n    if (systemId) {\n        str += ` ${enquoteDoctypeId(systemId)}`;\n    }\n    return str;\n}\nexports.serializeDoctypeContent = serializeDoctypeContent;\nexports.adapter = {\n    // Re-exports from domhandler\n    isCommentNode: domhandler_1.isComment,\n    isElementNode: domhandler_1.isTag,\n    isTextNode: domhandler_1.isText,\n    //Node construction\n    createDocument() {\n        const node = new domhandler_1.Document([]);\n        node['x-mode'] = parse5_1.html.DOCUMENT_MODE.NO_QUIRKS;\n        return node;\n    },\n    createDocumentFragment() {\n        return new domhandler_1.Document([]);\n    },\n    createElement(tagName, namespaceURI, attrs) {\n        const attribs = Object.create(null);\n        const attribsNamespace = Object.create(null);\n        const attribsPrefix = Object.create(null);\n        for (let i = 0; i < attrs.length; i++) {\n            const attrName = attrs[i].name;\n            attribs[attrName] = attrs[i].value;\n            attribsNamespace[attrName] = attrs[i].namespace;\n            attribsPrefix[attrName] = attrs[i].prefix;\n        }\n        const node = new domhandler_1.Element(tagName, attribs, []);\n        node.namespace = namespaceURI;\n        node['x-attribsNamespace'] = attribsNamespace;\n        node['x-attribsPrefix'] = attribsPrefix;\n        return node;\n    },\n    createCommentNode(data) {\n        return new domhandler_1.Comment(data);\n    },\n    //Tree mutation\n    appendChild(parentNode, newNode) {\n        const prev = parentNode.children[parentNode.children.length - 1];\n        if (prev) {\n            prev.next = newNode;\n            newNode.prev = prev;\n        }\n        parentNode.children.push(newNode);\n        newNode.parent = parentNode;\n    },\n    insertBefore(parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.children.indexOf(referenceNode);\n        const { prev } = referenceNode;\n        if (prev) {\n            prev.next = newNode;\n            newNode.prev = prev;\n        }\n        referenceNode.prev = newNode;\n        newNode.next = referenceNode;\n        parentNode.children.splice(insertionIdx, 0, newNode);\n        newNode.parent = parentNode;\n    },\n    setTemplateContent(templateElement, contentElement) {\n        exports.adapter.appendChild(templateElement, contentElement);\n    },\n    getTemplateContent(templateElement) {\n        return templateElement.children[0];\n    },\n    setDocumentType(document, name, publicId, systemId) {\n        const data = serializeDoctypeContent(name, publicId, systemId);\n        let doctypeNode = document.children.find((node) => (0, domhandler_1.isDirective)(node) && node.name === '!doctype');\n        if (doctypeNode) {\n            doctypeNode.data = data !== null && data !== void 0 ? data : null;\n        }\n        else {\n            doctypeNode = new domhandler_1.ProcessingInstruction('!doctype', data);\n            exports.adapter.appendChild(document, doctypeNode);\n        }\n        doctypeNode['x-name'] = name !== null && name !== void 0 ? name : undefined;\n        doctypeNode['x-publicId'] = publicId !== null && publicId !== void 0 ? publicId : undefined;\n        doctypeNode['x-systemId'] = systemId !== null && systemId !== void 0 ? systemId : undefined;\n    },\n    setDocumentMode(document, mode) {\n        document['x-mode'] = mode;\n    },\n    getDocumentMode(document) {\n        return document['x-mode'];\n    },\n    detachNode(node) {\n        if (node.parent) {\n            const idx = node.parent.children.indexOf(node);\n            const { prev, next } = node;\n            node.prev = null;\n            node.next = null;\n            if (prev) {\n                prev.next = next;\n            }\n            if (next) {\n                next.prev = prev;\n            }\n            node.parent.children.splice(idx, 1);\n            node.parent = null;\n        }\n    },\n    insertText(parentNode, text) {\n        const lastChild = parentNode.children[parentNode.children.length - 1];\n        if (lastChild && (0, domhandler_1.isText)(lastChild)) {\n            lastChild.data += text;\n        }\n        else {\n            exports.adapter.appendChild(parentNode, createTextNode(text));\n        }\n    },\n    insertTextBefore(parentNode, text, referenceNode) {\n        const prevNode = parentNode.children[parentNode.children.indexOf(referenceNode) - 1];\n        if (prevNode && (0, domhandler_1.isText)(prevNode)) {\n            prevNode.data += text;\n        }\n        else {\n            exports.adapter.insertBefore(parentNode, createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes(recipient, attrs) {\n        for (let i = 0; i < attrs.length; i++) {\n            const attrName = attrs[i].name;\n            if (typeof recipient.attribs[attrName] === 'undefined') {\n                recipient.attribs[attrName] = attrs[i].value;\n                recipient['x-attribsNamespace'][attrName] = attrs[i].namespace;\n                recipient['x-attribsPrefix'][attrName] = attrs[i].prefix;\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild(node) {\n        return node.children[0];\n    },\n    getChildNodes(node) {\n        return node.children;\n    },\n    getParentNode(node) {\n        return node.parent;\n    },\n    getAttrList(element) {\n        return element.attributes;\n    },\n    //Node data\n    getTagName(element) {\n        return element.name;\n    },\n    getNamespaceURI(element) {\n        return element.namespace;\n    },\n    getTextNodeContent(textNode) {\n        return textNode.data;\n    },\n    getCommentNodeContent(commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName(doctypeNode) {\n        var _a;\n        return (_a = doctypeNode['x-name']) !== null && _a !== void 0 ? _a : '';\n    },\n    getDocumentTypeNodePublicId(doctypeNode) {\n        var _a;\n        return (_a = doctypeNode['x-publicId']) !== null && _a !== void 0 ? _a : '';\n    },\n    getDocumentTypeNodeSystemId(doctypeNode) {\n        var _a;\n        return (_a = doctypeNode['x-systemId']) !== null && _a !== void 0 ? _a : '';\n    },\n    //Node types\n    isDocumentTypeNode(node) {\n        return (0, domhandler_1.isDirective)(node) && node.name === '!doctype';\n    },\n    // Source code location\n    setNodeSourceCodeLocation(node, location) {\n        if (location) {\n            node.startIndex = location.startOffset;\n            node.endIndex = location.endOffset;\n        }\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation(node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation(node, endLocation) {\n        if (endLocation.endOffset != null)\n            node.endIndex = endLocation.endOffset;\n        node.sourceCodeLocation = Object.assign(Object.assign({}, node.sourceCodeLocation), endLocation);\n    },\n};\n//# sourceMappingURL=index.js.map"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}