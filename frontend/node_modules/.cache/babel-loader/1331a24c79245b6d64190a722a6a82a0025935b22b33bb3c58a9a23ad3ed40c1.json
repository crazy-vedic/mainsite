{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.generate = exports.compile = void 0;\nvar boolbase_1 = __importDefault(require(\"boolbase\"));\n/**\n * Returns a function that checks if an elements index matches the given rule\n * highly optimized to return the fastest solution.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A highly optimized function that returns whether an index matches the nth-check.\n * @example\n *\n * ```js\n * const check = nthCheck.compile([2, 3]);\n *\n * check(0); // `false`\n * check(1); // `false`\n * check(2); // `true`\n * check(3); // `false`\n * check(4); // `true`\n * check(5); // `false`\n * check(6); // `true`\n * ```\n */\nfunction compile(parsed) {\n  var a = parsed[0];\n  // Subtract 1 from `b`, to convert from one- to zero-indexed.\n  var b = parsed[1] - 1;\n  /*\n   * When `b <= 0`, `a * n` won't be lead to any matches for `a < 0`.\n   * Besides, the specification states that no elements are\n   * matched when `a` and `b` are 0.\n   *\n   * `b < 0` here as we subtracted 1 from `b` above.\n   */\n  if (b < 0 && a <= 0) return boolbase_1.default.falseFunc;\n  // When `a` is in the range -1..1, it matches any element (so only `b` is checked).\n  if (a === -1) return function (index) {\n    return index <= b;\n  };\n  if (a === 0) return function (index) {\n    return index === b;\n  };\n  // When `b <= 0` and `a === 1`, they match any element.\n  if (a === 1) return b < 0 ? boolbase_1.default.trueFunc : function (index) {\n    return index >= b;\n  };\n  /*\n   * Otherwise, modulo can be used to check if there is a match.\n   *\n   * Modulo doesn't care about the sign, so let's use `a`s absolute value.\n   */\n  var absA = Math.abs(a);\n  // Get `b mod a`, + a if this is negative.\n  var bMod = (b % absA + absA) % absA;\n  return a > 1 ? function (index) {\n    return index >= b && index % absA === bMod;\n  } : function (index) {\n    return index <= b && index % absA === bMod;\n  };\n}\nexports.compile = compile;\n/**\n * Returns a function that produces a monotonously increasing sequence of indices.\n *\n * If the sequence has an end, the returned function will return `null` after\n * the last index in the sequence.\n *\n * @param parsed A tuple [a, b], as returned by `parse`.\n * @returns A function that produces a sequence of indices.\n * @example <caption>Always increasing (2n+3)</caption>\n *\n * ```js\n * const gen = nthCheck.generate([2, 3])\n *\n * gen() // `1`\n * gen() // `3`\n * gen() // `5`\n * gen() // `8`\n * gen() // `11`\n * ```\n *\n * @example <caption>With end value (-2n+10)</caption>\n *\n * ```js\n *\n * const gen = nthCheck.generate([-2, 5]);\n *\n * gen() // 0\n * gen() // 2\n * gen() // 4\n * gen() // null\n * ```\n */\nfunction generate(parsed) {\n  var a = parsed[0];\n  // Subtract 1 from `b`, to convert from one- to zero-indexed.\n  var b = parsed[1] - 1;\n  var n = 0;\n  // Make sure to always return an increasing sequence\n  if (a < 0) {\n    var aPos_1 = -a;\n    // Get `b mod a`\n    var minValue_1 = (b % aPos_1 + aPos_1) % aPos_1;\n    return function () {\n      var val = minValue_1 + aPos_1 * n++;\n      return val > b ? null : val;\n    };\n  }\n  if (a === 0) return b < 0 ?\n  // There are no result â€” always return `null`\n  function () {\n    return null;\n  } :\n  // Return `b` exactly once\n  function () {\n    return n++ === 0 ? b : null;\n  };\n  if (b < 0) {\n    b += a * Math.ceil(-b / a);\n  }\n  return function () {\n    return a * n++ + b;\n  };\n}\nexports.generate = generate;","map":{"version":3,"names":["boolbase_1","__importDefault","require","compile","parsed","a","b","default","falseFunc","index","trueFunc","absA","Math","abs","bMod","exports","generate","n","aPos_1","minValue_1","val","ceil"],"sources":["https://raw.githubusercontent.com/fb55/nth-check/639fd2a4000b69f82350aad8c34cb43f77e483ba/src/compile.ts"],"sourcesContent":[null],"mappings":";;;;;;;;;;;AAAA,IAAAA,UAAA,GAAAC,eAAA,CAAAC,OAAA;AAEA;;;;;;;;;;;;;;;;;;;;AAoBA,SAAgBC,OAAOA,CACnBC,MAA8B;EAE9B,IAAMC,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC;EACnB;EACA,IAAME,CAAC,GAAGF,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;EAEvB;;;;;;;EAOA,IAAIE,CAAC,GAAG,CAAC,IAAID,CAAC,IAAI,CAAC,EAAE,OAAOL,UAAA,CAAAO,OAAQ,CAACC,SAAS;EAE9C;EACA,IAAIH,CAAC,KAAK,CAAC,CAAC,EAAE,OAAO,UAACI,KAAK;IAAK,OAAAA,KAAK,IAAIH,CAAC;EAAV,CAAU;EAC1C,IAAID,CAAC,KAAK,CAAC,EAAE,OAAO,UAACI,KAAK;IAAK,OAAAA,KAAK,KAAKH,CAAC;EAAX,CAAW;EAC1C;EACA,IAAID,CAAC,KAAK,CAAC,EAAE,OAAOC,CAAC,GAAG,CAAC,GAAGN,UAAA,CAAAO,OAAQ,CAACG,QAAQ,GAAG,UAACD,KAAK;IAAK,OAAAA,KAAK,IAAIH,CAAC;EAAV,CAAU;EAErE;;;;;EAKA,IAAMK,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACR,CAAC,CAAC;EACxB;EACA,IAAMS,IAAI,GAAG,CAAER,CAAC,GAAGK,IAAI,GAAIA,IAAI,IAAIA,IAAI;EAEvC,OAAON,CAAC,GAAG,CAAC,GACN,UAACI,KAAK;IAAK,OAAAA,KAAK,IAAIH,CAAC,IAAIG,KAAK,GAAGE,IAAI,KAAKG,IAAI;EAAnC,CAAmC,GAC9C,UAACL,KAAK;IAAK,OAAAA,KAAK,IAAIH,CAAC,IAAIG,KAAK,GAAGE,IAAI,KAAKG,IAAI;EAAnC,CAAmC;AACxD;AAlCAC,OAAA,CAAAZ,OAAA,GAAAA,OAAA;AAoCA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgCA,SAAgBa,QAAQA,CAACZ,MAA8B;EACnD,IAAMC,CAAC,GAAGD,MAAM,CAAC,CAAC,CAAC;EACnB;EACA,IAAIE,CAAC,GAAGF,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC;EAErB,IAAIa,CAAC,GAAG,CAAC;EAET;EACA,IAAIZ,CAAC,GAAG,CAAC,EAAE;IACP,IAAMa,MAAI,GAAG,CAACb,CAAC;IACf;IACA,IAAMc,UAAQ,GAAG,CAAEb,CAAC,GAAGY,MAAI,GAAIA,MAAI,IAAIA,MAAI;IAC3C,OAAO;MACH,IAAME,GAAG,GAAGD,UAAQ,GAAGD,MAAI,GAAGD,CAAC,EAAE;MAEjC,OAAOG,GAAG,GAAGd,CAAC,GAAG,IAAI,GAAGc,GAAG;IAC/B,CAAC;;EAGL,IAAIf,CAAC,KAAK,CAAC,EACP,OAAOC,CAAC,GAAG,CAAC;EACN;EACA;IAAM,WAAI;EAAJ,CAAI;EACV;EACA;IAAM,OAACW,CAAC,EAAE,KAAK,CAAC,GAAGX,CAAC,GAAG,IAAI;EAArB,CAAsB;EAEtC,IAAIA,CAAC,GAAG,CAAC,EAAE;IACPA,CAAC,IAAID,CAAC,GAAGO,IAAI,CAACS,IAAI,CAAC,CAACf,CAAC,GAAGD,CAAC,CAAC;;EAG9B,OAAO;IAAM,OAAAA,CAAC,GAAGY,CAAC,EAAE,GAAGX,CAAC;EAAX,CAAW;AAC5B;AA/BAS,OAAA,CAAAC,QAAA,GAAAA,QAAA"},"metadata":{},"sourceType":"script","externalDependencies":[]}