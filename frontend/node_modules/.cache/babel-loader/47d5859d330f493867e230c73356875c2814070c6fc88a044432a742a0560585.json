{"ast":null,"code":"import { SelectorType, AttributeAction } from \"./types\";\nconst attribValChars = [\"\\\\\", '\"'];\nconst pseudoValChars = [...attribValChars, \"(\", \")\"];\nconst charsToEscapeInAttributeValue = new Set(attribValChars.map(c => c.charCodeAt(0)));\nconst charsToEscapeInPseudoValue = new Set(pseudoValChars.map(c => c.charCodeAt(0)));\nconst charsToEscapeInName = new Set([...pseudoValChars, \"~\", \"^\", \"$\", \"*\", \"+\", \"!\", \"|\", \":\", \"[\", \"]\", \" \", \".\"].map(c => c.charCodeAt(0)));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */\nexport function stringify(selector) {\n  return selector.map(token => token.map(stringifyToken).join(\"\")).join(\", \");\n}\nfunction stringifyToken(token, index, arr) {\n  switch (token.type) {\n    // Simple types\n    case SelectorType.Child:\n      return index === 0 ? \"> \" : \" > \";\n    case SelectorType.Parent:\n      return index === 0 ? \"< \" : \" < \";\n    case SelectorType.Sibling:\n      return index === 0 ? \"~ \" : \" ~ \";\n    case SelectorType.Adjacent:\n      return index === 0 ? \"+ \" : \" + \";\n    case SelectorType.Descendant:\n      return \" \";\n    case SelectorType.ColumnCombinator:\n      return index === 0 ? \"|| \" : \" || \";\n    case SelectorType.Universal:\n      // Return an empty string if the selector isn't needed.\n      return token.namespace === \"*\" && index + 1 < arr.length && \"name\" in arr[index + 1] ? \"\" : `${getNamespace(token.namespace)}*`;\n    case SelectorType.Tag:\n      return getNamespacedName(token);\n    case SelectorType.PseudoElement:\n      return `::${escapeName(token.name, charsToEscapeInName)}${token.data === null ? \"\" : `(${escapeName(token.data, charsToEscapeInPseudoValue)})`}`;\n    case SelectorType.Pseudo:\n      return `:${escapeName(token.name, charsToEscapeInName)}${token.data === null ? \"\" : `(${typeof token.data === \"string\" ? escapeName(token.data, charsToEscapeInPseudoValue) : stringify(token.data)})`}`;\n    case SelectorType.Attribute:\n      {\n        if (token.name === \"id\" && token.action === AttributeAction.Equals && token.ignoreCase === \"quirks\" && !token.namespace) {\n          return `#${escapeName(token.value, charsToEscapeInName)}`;\n        }\n        if (token.name === \"class\" && token.action === AttributeAction.Element && token.ignoreCase === \"quirks\" && !token.namespace) {\n          return `.${escapeName(token.value, charsToEscapeInName)}`;\n        }\n        const name = getNamespacedName(token);\n        if (token.action === AttributeAction.Exists) {\n          return `[${name}]`;\n        }\n        return `[${name}${getActionValue(token.action)}=\"${escapeName(token.value, charsToEscapeInAttributeValue)}\"${token.ignoreCase === null ? \"\" : token.ignoreCase ? \" i\" : \" s\"}]`;\n      }\n  }\n}\nfunction getActionValue(action) {\n  switch (action) {\n    case AttributeAction.Equals:\n      return \"\";\n    case AttributeAction.Element:\n      return \"~\";\n    case AttributeAction.Start:\n      return \"^\";\n    case AttributeAction.End:\n      return \"$\";\n    case AttributeAction.Any:\n      return \"*\";\n    case AttributeAction.Not:\n      return \"!\";\n    case AttributeAction.Hyphen:\n      return \"|\";\n    case AttributeAction.Exists:\n      throw new Error(\"Shouldn't be here\");\n  }\n}\nfunction getNamespacedName(token) {\n  return `${getNamespace(token.namespace)}${escapeName(token.name, charsToEscapeInName)}`;\n}\nfunction getNamespace(namespace) {\n  return namespace !== null ? `${namespace === \"*\" ? \"*\" : escapeName(namespace, charsToEscapeInName)}|` : \"\";\n}\nfunction escapeName(str, charsToEscape) {\n  let lastIdx = 0;\n  let ret = \"\";\n  for (let i = 0; i < str.length; i++) {\n    if (charsToEscape.has(str.charCodeAt(i))) {\n      ret += `${str.slice(lastIdx, i)}\\\\${str.charAt(i)}`;\n      lastIdx = i + 1;\n    }\n  }\n  return ret.length > 0 ? ret + str.slice(lastIdx) : str;\n}","map":{"version":3,"names":["SelectorType","AttributeAction","attribValChars","pseudoValChars","charsToEscapeInAttributeValue","Set","map","c","charCodeAt","charsToEscapeInPseudoValue","charsToEscapeInName","stringify","selector","token","stringifyToken","join","index","arr","type","Child","Parent","Sibling","Adjacent","Descendant","ColumnCombinator","Universal","namespace","length","getNamespace","Tag","getNamespacedName","PseudoElement","escapeName","name","data","Pseudo","Attribute","action","Equals","ignoreCase","value","Element","Exists","getActionValue","Start","End","Any","Not","Hyphen","Error","str","charsToEscape","lastIdx","ret","i","has","slice","charAt"],"sources":["C:/Users/vedic/node_modules/css-what/lib/es/stringify.js"],"sourcesContent":["import { SelectorType, AttributeAction } from \"./types\";\nconst attribValChars = [\"\\\\\", '\"'];\nconst pseudoValChars = [...attribValChars, \"(\", \")\"];\nconst charsToEscapeInAttributeValue = new Set(attribValChars.map((c) => c.charCodeAt(0)));\nconst charsToEscapeInPseudoValue = new Set(pseudoValChars.map((c) => c.charCodeAt(0)));\nconst charsToEscapeInName = new Set([\n    ...pseudoValChars,\n    \"~\",\n    \"^\",\n    \"$\",\n    \"*\",\n    \"+\",\n    \"!\",\n    \"|\",\n    \":\",\n    \"[\",\n    \"]\",\n    \" \",\n    \".\",\n].map((c) => c.charCodeAt(0)));\n/**\n * Turns `selector` back into a string.\n *\n * @param selector Selector to stringify.\n */\nexport function stringify(selector) {\n    return selector\n        .map((token) => token.map(stringifyToken).join(\"\"))\n        .join(\", \");\n}\nfunction stringifyToken(token, index, arr) {\n    switch (token.type) {\n        // Simple types\n        case SelectorType.Child:\n            return index === 0 ? \"> \" : \" > \";\n        case SelectorType.Parent:\n            return index === 0 ? \"< \" : \" < \";\n        case SelectorType.Sibling:\n            return index === 0 ? \"~ \" : \" ~ \";\n        case SelectorType.Adjacent:\n            return index === 0 ? \"+ \" : \" + \";\n        case SelectorType.Descendant:\n            return \" \";\n        case SelectorType.ColumnCombinator:\n            return index === 0 ? \"|| \" : \" || \";\n        case SelectorType.Universal:\n            // Return an empty string if the selector isn't needed.\n            return token.namespace === \"*\" &&\n                index + 1 < arr.length &&\n                \"name\" in arr[index + 1]\n                ? \"\"\n                : `${getNamespace(token.namespace)}*`;\n        case SelectorType.Tag:\n            return getNamespacedName(token);\n        case SelectorType.PseudoElement:\n            return `::${escapeName(token.name, charsToEscapeInName)}${token.data === null\n                ? \"\"\n                : `(${escapeName(token.data, charsToEscapeInPseudoValue)})`}`;\n        case SelectorType.Pseudo:\n            return `:${escapeName(token.name, charsToEscapeInName)}${token.data === null\n                ? \"\"\n                : `(${typeof token.data === \"string\"\n                    ? escapeName(token.data, charsToEscapeInPseudoValue)\n                    : stringify(token.data)})`}`;\n        case SelectorType.Attribute: {\n            if (token.name === \"id\" &&\n                token.action === AttributeAction.Equals &&\n                token.ignoreCase === \"quirks\" &&\n                !token.namespace) {\n                return `#${escapeName(token.value, charsToEscapeInName)}`;\n            }\n            if (token.name === \"class\" &&\n                token.action === AttributeAction.Element &&\n                token.ignoreCase === \"quirks\" &&\n                !token.namespace) {\n                return `.${escapeName(token.value, charsToEscapeInName)}`;\n            }\n            const name = getNamespacedName(token);\n            if (token.action === AttributeAction.Exists) {\n                return `[${name}]`;\n            }\n            return `[${name}${getActionValue(token.action)}=\"${escapeName(token.value, charsToEscapeInAttributeValue)}\"${token.ignoreCase === null ? \"\" : token.ignoreCase ? \" i\" : \" s\"}]`;\n        }\n    }\n}\nfunction getActionValue(action) {\n    switch (action) {\n        case AttributeAction.Equals:\n            return \"\";\n        case AttributeAction.Element:\n            return \"~\";\n        case AttributeAction.Start:\n            return \"^\";\n        case AttributeAction.End:\n            return \"$\";\n        case AttributeAction.Any:\n            return \"*\";\n        case AttributeAction.Not:\n            return \"!\";\n        case AttributeAction.Hyphen:\n            return \"|\";\n        case AttributeAction.Exists:\n            throw new Error(\"Shouldn't be here\");\n    }\n}\nfunction getNamespacedName(token) {\n    return `${getNamespace(token.namespace)}${escapeName(token.name, charsToEscapeInName)}`;\n}\nfunction getNamespace(namespace) {\n    return namespace !== null\n        ? `${namespace === \"*\"\n            ? \"*\"\n            : escapeName(namespace, charsToEscapeInName)}|`\n        : \"\";\n}\nfunction escapeName(str, charsToEscape) {\n    let lastIdx = 0;\n    let ret = \"\";\n    for (let i = 0; i < str.length; i++) {\n        if (charsToEscape.has(str.charCodeAt(i))) {\n            ret += `${str.slice(lastIdx, i)}\\\\${str.charAt(i)}`;\n            lastIdx = i + 1;\n        }\n    }\n    return ret.length > 0 ? ret + str.slice(lastIdx) : str;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}